<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on SATHEE</title>
    <link>/python/</link>
    <description>Recent content in Python on SATHEE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/python/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Python Tutorial </title>
      <link>/python/python-tutorial-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tutorial-/</guid>
      <description>Python Tutorial This Python Tutorial is very well suited for Beginners, and also for experienced programmers with other programming languages like C++ and Java. This specially designed Python tutorial will help you learn Python Programming Language in the most efficient way, with topics from basics to advanced (like Web-scraping, Django, Deep-Learning, etc.) with examples.
What is Python? Python is a high-level, general-purpose, and very popular programming language. Python programming language (latest Python 3) is being used in web development, Machine Learning applications, along with all cutting-edge technology in Software Industry.</description>
    </item>
    
    <item>
      <title>Introduction To PYTHON </title>
      <link>/python/introduction-to-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/introduction-to-python-/</guid>
      <description>Introduction To PYTHON Python is a widely used general-purpose, high level programming language. It was created by Guido van Rossum in 1991 and further developed by the Python Software Foundation. It was designed with an emphasis on code readability, and its syntax allows programmers to express their concepts in fewer lines of code.
Python is a programming language that lets you work quickly and integrate systems more efficiently.
There are two major Python versions: Python 2 and Python 3.</description>
    </item>
    
    <item>
      <title>Python Language advantages and applications </title>
      <link>/python/python-language-advantages-and-applications-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-language-advantages-and-applications-/</guid>
      <description>Python Language advantages and applications Python is a high-level, interpreted, and general-purpose dynamic programming language that focuses on code readability. It generally has small programs when compared to Java and C. It was founded in 1991 by developer Guido Van Rossum. Python ranks among the most popular and fastest-growing languages in the world. Python is a powerful, flexible, and easy-to-use language. In addition, the python community is very active. It is used in many organizations as it supports multiple programming paradigms.</description>
    </item>
    
    <item>
      <title>Download and Install Python 3 Latest Version </title>
      <link>/python/download-and-install-python-3-latest-version-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/download-and-install-python-3-latest-version-/</guid>
      <description>Download and Install Python 3 Latest Version Here we will be discussing how to get the answer to all questions related to installing Python on Windows/Linux/mac OS. Python was developed by Guido van Rossum in the early 1990&amp;rsquo;s and its latest version is 3.11.2, we can simply call it Python 3. To understand how to install Python You need to know What Python is and where it is actually installed in your system.</description>
    </item>
    
    <item>
      <title>Python 3 basics </title>
      <link>/python/python-3-basics-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-3-basics-/</guid>
      <description>Python 3 basics Python 3 is a popular high-level programming language used for a wide variety of applications. Here are some basics of Python 3 that you should know:
Variables: In Python 3, variables are created by assigning a value to a name. For example, x = 5 creates a variable called x and assigns the value 5 to it.
Data types: Python 3 supports several built-in data types, including integers, floats, strings, booleans, lists, tuples, and dictionaries.</description>
    </item>
    
    <item>
      <title>Python Keywords </title>
      <link>/python/python-keywords-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-keywords-/</guid>
      <description>Python Keywords Python Keywords: Introduction
Keywords in Python are reserved words that can not be used as a variable name, function name, or any other identifier.
List of all keywords in Python We can also get all the keyword names using the below code.
Example: Python Keywords List Python3 # Python code to demonstrate working of iskeyword() # importing &amp;quot;keyword&amp;quot; for keyword operations import keyword # printing all keywords at once using &amp;quot;kwlist()&amp;quot; print(&amp;quot;The list of keywords is : &amp;quot;) print(keyword.</description>
    </item>
    
    <item>
      <title>Namespaces and Scope in Python </title>
      <link>/python/namespaces-and-scope-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/namespaces-and-scope-in-python-/</guid>
      <description>Namespaces and Scope in Python What is namespace: A namespace is a system that has a unique name for each and every object in Python. An object might be a variable or a method. Python itself maintains a namespace in the form of a Python dictionary. Let&amp;rsquo;s go through an example, a directory-file system structure in computers. Needless to say, that one can have multiple directories having a file with the same name inside every directory.</description>
    </item>
    
    <item>
      <title>Statement, Indentation and Comment in Python </title>
      <link>/python/statement-indentation-and-comment-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/statement-indentation-and-comment-in-python-/</guid>
      <description>Statement, Indentation and Comment in Python Here, we will discuss Statements in Python, Indentation in Python, and Comments in Python. We will also discuss different rules and examples for Python Statement, Python Indentation, Python Comment, and the Difference Between &amp;lsquo;Docstrings&amp;rsquo; and &amp;lsquo;Multi-line Comments.
What is Statement in Python A Python statement is an instruction that the Python interpreter can execute. There are different types of statements in Python language as Assignment statements, Conditional statements, Looping statements, etc.</description>
    </item>
    
    <item>
      <title>How to assign values to variables in Python and other languages </title>
      <link>/python/how-to-assign-values-to-variables-in-python-and-other-languages-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/how-to-assign-values-to-variables-in-python-and-other-languages-/</guid>
      <description>How to assign values to variables in Python and other languages This article discusses methods to assign values to variables. Method 1: Direct Initialisation Method In this method, you will directly assign the value in python but in other programming languages like C, and C++, you have to first initialize the data type of the variable. So, In Python, there is no need for explicit declaration in variables as compared to using some other programming languages.</description>
    </item>
    
    <item>
      <title>Taking input in Python </title>
      <link>/python/taking-input-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/taking-input-in-python-/</guid>
      <description>Taking input in Python Developers often have a need to interact with users, either to get data or to provide some sort of result. Most programs today use a dialog box as a way of asking the user to provide some type of input. While Python provides us with two inbuilt functions to read the input from the keyboard. input ( prompt )
raw_input ( prompt )
input (): This function first takes the input from the user and converts it into a string.</description>
    </item>
    
    <item>
      <title>Taking input from console in Python </title>
      <link>/python/taking-input-from-console-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/taking-input-from-console-in-python-/</guid>
      <description>Taking input from console in Python What is Console in Python? Console (also called Shell) is basically a command line interpreter that takes input from the user i.e one command at a time and interprets it. If it is error free then it runs the command and gives required output otherwise shows the error message. A Python Console looks like this. Here we write a command and to execute the command just press enter key and your command will be interpreted.</description>
    </item>
    
    <item>
      <title>Taking multiple inputs from user in Python </title>
      <link>/python/taking-multiple-inputs-from-user-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/taking-multiple-inputs-from-user-in-python-/</guid>
      <description>Taking multiple inputs from user in Python The developer often wants a user to enter multiple values or inputs in one line. In C++/C user can take multiple inputs in one line using scanf but in Python user can take multiple values or inputs in one line by two methods. Using split() method
Using List comprehension
Using split() method : This function helps in getting multiple inputs from users. It breaks the given input by the specified separator.</description>
    </item>
    
    <item>
      <title>Python | Output using print() function </title>
      <link>/python/python-output-using-print-function-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-output-using-print-function-/</guid>
      <description>Python | Output using print() function Python print() function prints the message to the screen or any other standard output device.
Syntax: print(value(s), sep= &#39; &#39;, end = &#39;\n&#39;, file=file, flush=flush) Parameters: value(s): Any value, and as many as you like. Will be converted to a string before printed
sep=&amp;lsquo;separator&amp;rsquo; : (Optional) Specify how to separate the objects, if there is more than one.Default :&amp;rsquo; &#39;
end=&amp;lsquo;end&amp;rsquo;: (Optional) Specify what to print at the end.</description>
    </item>
    
    <item>
      <title>How to print without newline in Python? </title>
      <link>/python/how-to-print-without-newline-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/how-to-print-without-newline-in-python-/</guid>
      <description>How to print without newline in Python? Generally, people switching from C/C++ to Python wonder how to print two or more variables or statements without going into a new line in python. Since the python print() function by default ends with a newline. Python has a predefined format if you use print(a_variable) then it will go to the next line automatically. For example: Python3 print(&amp;quot;Renewbuy&amp;quot;) print(&amp;quot;Renewbuy&amp;quot;) This will result in this: Renewbuy Renewbuy But sometimes it may happen that we don&amp;rsquo;t want to go to the next line but want to print on the same line.</description>
    </item>
    
    <item>
      <title>Python end parameter in print() </title>
      <link>/python/python-end-parameter-in-print-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-end-parameter-in-print-/</guid>
      <description>Python end parameter in print() By default Python&amp;rsquo;s print() function ends with a newline. A programmer with C/C++ background may wonder how to print without a newline. Python&amp;rsquo;s print() function comes with a parameter called &amp;rsquo;end&amp;rsquo;. By default, the value of this parameter is &amp;lsquo;\n&amp;rsquo;, i.e. the new line character. Example 1: Here, we can end a print statement with any character/string using this parameter. Python3 # ends the output with a space print(&amp;quot;Welcome to&amp;quot;, end = &#39; &#39;) print(&amp;quot;Renewbuy&amp;quot;, end= &#39; &#39;) Output:</description>
    </item>
    
    <item>
      <title>Python | sep parameter in print() </title>
      <link>/python/python-sep-parameter-in-print-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-sep-parameter-in-print-/</guid>
      <description>Python | sep parameter in print() The separator between the arguments to print() function in Python is space by default (softspace feature) , which can be modified and can be made to any character, integer or string as per our choice. The &amp;lsquo;sep&amp;rsquo; parameter is used to achieve the same, it is found only in python 3.x or later. It is also used for formatting the output strings. Examples:
Python3 #code for disabling the softspace feature print(&#39;G&#39;,&#39;F&#39;,&#39;G&#39;, sep=&#39;&#39;) #for formatting a date print(&#39;09&#39;,&#39;12&#39;,&#39;2016&#39;, sep=&#39;-&#39;) #another example print(&#39;pratik&#39;,&#39;Renewbuy&#39;, sep=&#39;@&#39;) Output: GFG 09-12-2016 pratik@Renewbuy The sep parameter when used with the end parameter it produces awesome results.</description>
    </item>
    
    <item>
      <title>Python | Output Formatting </title>
      <link>/python/python-output-formatting-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-output-formatting-/</guid>
      <description>Python | Output Formatting There are several ways to present the output of a program. Data can be printed in a human-readable form, or written to a file for future use, or even in some other specified form. Users often want more control over the formatting of output than simply printing space-separated values. There are several ways to format output. To use formatted string literals, begin a string with f or F before the opening quotation mark or triple quotation mark.</description>
    </item>
    
    <item>
      <title>Python Operators </title>
      <link>/python/python-operators-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-operators-/</guid>
      <description>Python Operators In Python programming, Operators in general are used to perform operations on values and variables. These are standard symbols used for the purpose of logical and arithmetic operations. In this article, we will look into different types of Python operators. OPERATORS: These are the special symbols. Eg- + , * , /, etc.
OPERAND: It is the value on which the operator is applied.
Types of Operators in Python Arithmetic Operators</description>
    </item>
    
    <item>
      <title>Ternary Operator in Python </title>
      <link>/python/ternary-operator-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/ternary-operator-in-python-/</guid>
      <description>Ternary Operator in Python Conditional expressions (sometimes called a &amp;ldquo;ternary operator&amp;rdquo;) have the lowest priority of all Python operations. Ternary operators evaluate something based on a condition being true or false. It was added to Python in version 2.5. It simply allows testing a condition in a single line replacing the multiline if-else making the code compact. Syntax : [on_true] if [expression] else [on_false] expression : conditional_expression | lambda_expr Simple Method to use ternary operator:</description>
    </item>
    
    <item>
      <title>Division Operators in Python </title>
      <link>/python/division-operators-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/division-operators-in-python-/</guid>
      <description>Division Operators in Python Division Operators allow you to divide two numbers and return a quotient, i.e., the first number or number at the left is divided by the second number or number at the right and returns the quotient. There are two types of division operators: (i) Float division: The quotient returns by this operator is always a float number, no matter if two numbers are integer. For example:</description>
    </item>
    
    <item>
      <title>Operator Overloading in Python </title>
      <link>/python/operator-overloading-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/operator-overloading-in-python-/</guid>
      <description>Operator Overloading in Python Operator Overloading means giving extended meaning beyond their predefined operational meaning. For example operator + is used to add two integers as well as join two strings and merge two lists. It is achievable because &amp;lsquo;+&amp;rsquo; operator is overloaded by int class and str class. You might have noticed that the same built-in operator or function shows different behavior for objects of different classes, this is called Operator Overloading.</description>
    </item>
    
    <item>
      <title>Any All in Python </title>
      <link>/python/any-all-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/any-all-in-python-/</guid>
      <description>Any All in Python Any and All are two built-in functions provided in python used for successive And/Or. Any Returns true if any of the items is True. It returns False if empty or all are false. Any can be thought of as a sequence of OR operations on the provided iterables. It short circuit the execution i.e. stop the execution as soon as the result is known. Syntax: any(list of iterables) Python # Since all are false, false is returned print (any([False, False, False, False])) # Here the method will short-circuit at the # second item (True) and will return True.</description>
    </item>
    
    <item>
      <title>Operator Functions in Python | Set 1 </title>
      <link>/python/operator-functions-in-python-set-1-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/operator-functions-in-python-set-1-/</guid>
      <description>Operator Functions in Python | Set 1 Python has predefined functions for many mathematical, logical, relational, bitwise etc operations under the module &amp;ldquo;operator&amp;rdquo;. Some of the basic functions are covered in this article.
1. add(a, b) :- This function returns addition of the given arguments.Operation &amp;ndash; a + b.
2. sub(a, b) :- This function returns difference of the given arguments.Operation &amp;ndash; a &amp;ndash; b.
3. mul(a, b) :- This function returns product of the given arguments.</description>
    </item>
    
    <item>
      <title>Operator Functions in Python | Set 2 </title>
      <link>/python/operator-functions-in-python-set-2-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/operator-functions-in-python-set-2-/</guid>
      <description>Operator Functions in Python | Set 2 Operator Functions in Python | Set 1
More functions are discussed in this article.
1. setitem(ob, pos, val) :- This function is used to assign the value at a particular position in the container. Operation &amp;ndash; ob[pos] = val
2. delitem(ob, pos) :- This function is used to delete the value at a particular position in the container. Operation &amp;ndash; del ob[pos]
3. getitem(ob, pos) :- This function is used to access the value at a particular position in the container.</description>
    </item>
    
    <item>
      <title>Difference between == and is operator in Python </title>
      <link>/python/difference-between-and-is-operator-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/difference-between-and-is-operator-in-python-/</guid>
      <description>Difference between == and is operator in Python When comparing objects in Python, the identity operator is frequently used in contexts where the equality operator == should be. In reality, it is almost never a good idea to use it when comparing data.
What is == Operator? To compare objects based on their values, Python&amp;rsquo;s equality operators (==) are employed. It calls the left object&amp;rsquo;s __eq__() class method, which specifies the criteria for determining equality.</description>
    </item>
    
    <item>
      <title>Python Membership and Identity Operators </title>
      <link>/python/python-membership-and-identity-operators-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-membership-and-identity-operators-/</guid>
      <description>Python Membership and Identity Operators In this article, we are going to learn Python Membership and Identity Operators.
Membership Operators Python offers two membership operators to check or validate the membership of a value. It tests for membership in a sequence, such as strings, lists, or tuples. in operator: The &amp;lsquo;in&amp;rsquo; operator is used to check if a character/ substring/ element exists in a sequence or not. Evaluate to True if it finds the specified element in a sequence otherwise False.</description>
    </item>
    
    <item>
      <title>Python | Set 3 (Strings, Lists, Tuples, Iterations) </title>
      <link>/python/python-set-3-strings-lists-tuples-iterations-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-set-3-strings-lists-tuples-iterations-/</guid>
      <description>Python | Set 3 (Strings, Lists, Tuples, Iterations) In the previous article, we read about the basics of Python. Now, we continue with some more python concepts.
Strings in Python: A string is a sequence of characters that can be a combination of letters, numbers, and special characters. It can be declared in python by using single quotes, double quotes, or even triple quotes. These quotes are not a part of a string, they define only starting and ending of the string.</description>
    </item>
    
    <item>
      <title>Python String </title>
      <link>/python/python-string-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-string-/</guid>
      <description>Python String A string is a data structure in Python that represents a sequence of characters. It is an immutable data type, meaning that once you have created a string, you cannot change it. Strings are used widely in many different applications, such as storing and manipulating text data, representing names, addresses, and other types of data that can be represented as text.
Example:
&amp;quot;Renewbuy&amp;quot; or &#39;Renewbuy&#39; Python does not have a character data type, a single character is simply a string with a length of 1.</description>
    </item>
    
    <item>
      <title>Python Lists </title>
      <link>/python/python-lists-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-lists-/</guid>
      <description>Python Lists Python Lists are just like dynamically sized arrays, declared in other languages (vector in C++ and ArrayList in Java). In simple language, a list is a collection of things, enclosed in [ ] and separated by commas. The list is a sequence data type which is used to store the collection of data. Tuples and String are other types of sequence data types.
Example of list in Python Here we are creating Python List using [].</description>
    </item>
    
    <item>
      <title>Python Tuples </title>
      <link>/python/python-tuples-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tuples-/</guid>
      <description>Python Tuples Tuple is a collection of Python objects much like a list. The sequence of values stored in a tuple can be of any type, and they are indexed by integers. Values of a tuple are syntactically separated by &amp;lsquo;commas&amp;rsquo;. Although it is not necessary, it is more common to define a tuple by closing the sequence of values in parentheses. This helps in understanding the Python tuples more easily.</description>
    </item>
    
    <item>
      <title>Python Sets </title>
      <link>/python/python-sets-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-sets-/</guid>
      <description>Python Sets In Python, a Set is an unordered collection of data types that is iterable, mutable and has no duplicate elements. The order of elements in a set is undefined though it may consist of various elements. The major advantage of using a set, as opposed to a list, is that it has a highly optimized method for checking whether a specific element is contained in the set.
Creating a Set Sets can be created by using the built-in set() function with an iterable object or a sequence by placing the sequence inside curly braces, separated by a &amp;lsquo;comma&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Python Dictionary </title>
      <link>/python/python-dictionary-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-dictionary-/</guid>
      <description>Python Dictionary Dictionary in Python is a collection of keys values, used to store data values like a map, which, unlike other data types which hold only a single value as an element.
Example of Dictionary in Python Dictionary holds key:value pair. Key-Value is provided in the dictionary to make it more optimized. Python3 Dict = {1: &#39;Renewbuy&#39;, 2: &#39;For&#39;, 3: &#39;Renewbuy&#39;} print(Dict) Output:
{1: &#39;Renewbuy&#39;, 2: &#39;For&#39;, 3: &#39;Renewbuy&#39;} Creating a Dictionary In Python, a dictionary can be created by placing a sequence of elements within curly {} braces, separated by &amp;lsquo;comma&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Python Arrays </title>
      <link>/python/python-arrays-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-arrays-/</guid>
      <description>Python Arrays An array is a collection of items stored at contiguous memory locations. The idea is to store multiple items of the same type together. This makes it easier to calculate the position of each element by simply adding an offset to a base value, i.e., the memory location of the first element of the array (generally denoted by the name of the array).For simplicity, we can think of an array a fleet of stairs where on each step is placed a value (let&amp;rsquo;s say one of your friends).</description>
    </item>
    
    <item>
      <title>Python If Else </title>
      <link>/python/python-if-else-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-if-else-/</guid>
      <description>Python If Else There comes situations in real life when we need to make some decisions and based on these decisions, we decide what should we do next. Similar situations arise in programming also where we need to make some decisions and based on these decisions we will execute the next block of code. Decision-making statements in programming languages decide the direction(Control Flow) of the flow of program execution. Types of Control Flow in Python In Python programming language, the type of control flow statements are as follows:</description>
    </item>
    
    <item>
      <title>Chaining comparison operators in Python </title>
      <link>/python/chaining-comparison-operators-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/chaining-comparison-operators-in-python-/</guid>
      <description>Chaining comparison operators in Python Checking more than two conditions is very common in Programming Languages. Let&amp;rsquo;s say we want to check the below condition:
a &amp;lt; b &amp;lt; c The most common syntax to do it is as follows:
if a &amp;lt; b and b &amp;lt; c : {...} In Python, there is a better way to write this using the Comparison operator Chaining. The chaining of operators can be written as follows:</description>
    </item>
    
    <item>
      <title>Python For Loops </title>
      <link>/python/python-for-loops-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-for-loops-/</guid>
      <description>Python For Loops Python For loop is used for sequential traversal i.e. it is used for iterating over an iterable like String, Tuple, List, Set or Dictionary.
In Python, there is no C style for loop, i.e., for (i=0; i
Note: In Python, for loops only implements the collection-based iteration.
For Loops Syntax for var in iterable: # statements Flowchart of for loop Here the iterable is a collection of objects like lists, tuples.</description>
    </item>
    
    <item>
      <title>Python While Loop </title>
      <link>/python/python-while-loop-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-while-loop-/</guid>
      <description>Python While Loop Python While Loop is used to execute a block of statements repeatedly until a given condition is satisfied. And when the condition becomes false, the line immediately after the loop in the program is executed.
Syntax: while expression: statement(s) Flowchart of While Loop : While loop falls under the category of indefinite iteration. Indefinite iteration means that the number of times the loop is executed isn&amp;rsquo;t specified explicitly in advance.</description>
    </item>
    
    <item>
      <title>Python break statement </title>
      <link>/python/python-break-statement-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-break-statement-/</guid>
      <description>Python break statement Python break is used to terminate the execution of the loop. Python break statement Syntax: Loop{ Condition: break } Python break statement break statement in Python is used to bring the control out of the loop when some external condition is triggered. break statement is put inside the loop body (generally after if condition). It terminates the current loop, i.e., the loop in which it appears, and resumes execution at the next statement immediately after the end of that loop.</description>
    </item>
    
    <item>
      <title>Python Continue Statement </title>
      <link>/python/python-continue-statement-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-continue-statement-/</guid>
      <description>Python Continue Statement Python Continue Statement skips the execution of the program block from after the continue statement and forces the control to start the next iteration.
Python Continue Statement Python Continue statement is a loop control statement that forces to execute the next iteration of the loop while skipping the rest of the code inside the loop for the current iteration only, i.e. when the continue statement is executed in the loop, the code inside the loop following the continue statement will be skipped for the current iteration and the next iteration of the loop will begin.</description>
    </item>
    
    <item>
      <title>Python pass Statement </title>
      <link>/python/python-pass-statement-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-pass-statement-/</guid>
      <description>Python pass Statement The Python pass statement is a null statement. But the difference between pass and comment is that comment is ignored by the interpreter whereas pass is not ignored. The Syntax of the pass statement pass What is pass statement in Python? When the user does not know what code to write, So user simply places a pass at that line. Sometimes, the pass is used when the user doesn&amp;rsquo;t want any code to execute.</description>
    </item>
    
    <item>
      <title>Looping Techniques in Python </title>
      <link>/python/looping-techniques-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/looping-techniques-in-python-/</guid>
      <description>Looping Techniques in Python Python supports various looping techniques by certain inbuilt functions, in various sequential containers. These methods are primarily very useful in competitive programming and also in various projects which require a specific technique with loops maintaining the overall structure of code. A lot of time and memory space is been saved as there is no need to declare the extra variables which we declare in the traditional approach of loops.</description>
    </item>
    
    <item>
      <title>Python Functions </title>
      <link>/python/python-functions-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-functions-/</guid>
      <description>Python Functions Python Functions is a block of statements that return the specific task.
The idea is to put some commonly or repeatedly done tasks together and make a function so that instead of writing the same code again and again for different inputs, we can do the function calls to reuse code contained in it over and over again. Some Benefits of Using Functions
Increase Code Readability Increase Code Reusability</description>
    </item>
    
    <item>
      <title>*args and **kwargs in Python </title>
      <link>/python/args-and-kwargs-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/args-and-kwargs-in-python-/</guid>
      <description>*args and **kwargs in Python In this article, we will cover what ** (double star/asterisk) and * (star/asterisk) do for parameters in Python, Here, we will also cover args and kwargs examples in Python. We can pass a variable number of arguments to a function using special symbols. There are two special symbols:
*args and **kwargs in Python
Special Symbols Used for passing arguments in Python:
*args (Non-Keyword Arguments)
**kwargs (Keyword Arguments)</description>
    </item>
    
    <item>
      <title>When to use yield instead of return in Python? </title>
      <link>/python/when-to-use-yield-instead-of-return-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/when-to-use-yield-instead-of-return-in-python-/</guid>
      <description>When to use yield instead of return in Python? The yield statement suspends a function&amp;rsquo;s execution and sends a value back to the caller, but retains enough state to enable the function to resume where it left off. When the function resumes, it continues execution immediately after the last yield run. This allows its code to produce a series of values over time, rather than computing them at once and sending them back like a list.</description>
    </item>
    
    <item>
      <title>Generators in Python </title>
      <link>/python/generators-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/generators-in-python-/</guid>
      <description>Generators in Python Prerequisites: Yield Keyword and Iterators There are two terms involved when we discuss generators.
Generator-Function: A generator-function is defined like a normal function, but whenever it needs to generate a value, it does so with the yield keyword rather than return. If the body of a def contains yield, the function automatically becomes a generator function. Python3 # A generator function that yields 1 for first time, # 2 second time and 3 third time def simpleGeneratorFun(): yield 1 yield 2 yield 3 # Driver code to check above generator function for value in simpleGeneratorFun(): print(value) 1 2 3 Generator-Object : Generator functions return a generator object.</description>
    </item>
    
    <item>
      <title>Python lambda </title>
      <link>/python/python-lambda-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-lambda-/</guid>
      <description>Python lambda In Python, an anonymous function means that a function is without a name. As we already know that def keyword is used to define the normal functions and the lambda keyword is used to create anonymous functions.
Python lambda Syntax: lambda arguments : expression Python lambda Example: Python3 calc = lambda num: &amp;quot;Even number&amp;quot; if num % 2 == 0 else &amp;quot;Odd number&amp;quot; print(calc(20)) Output:
Even number Python lambda properties: This function can have any number of arguments but only one expression, which is evaluated and returned.</description>
    </item>
    
    <item>
      <title>Global and Local Variables in Python </title>
      <link>/python/global-and-local-variables-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/global-and-local-variables-in-python-/</guid>
      <description>Global and Local Variables in Python Python Global variables are those which are not defined inside any function and have a global scope whereas Python local variables are those which are defined inside a function and their scope is limited to that function only. In other words, we can say that local variables are accessible only inside the function in which it was initialized whereas the global variables are accessible throughout the program and inside every function.</description>
    </item>
    
    <item>
      <title>Global keyword in Python </title>
      <link>/python/global-keyword-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/global-keyword-in-python-/</guid>
      <description>Global keyword in Python In this article, we will cover the global keyword, the basic rules for global keywords in Python, the difference between the local, and global variables, and examples of global keywords in Python.
What is the purpose of global keywords in python? A global keyword is a keyword that allows a user to modify a variable outside the current scope. It is used to create global variables in Python from a non-global scope, i.</description>
    </item>
    
    <item>
      <title>First Class functions in Python </title>
      <link>/python/first-class-functions-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/first-class-functions-in-python-/</guid>
      <description>First Class functions in Python First class objects in a language are handled uniformly throughout. They may be stored in data structures, passed as arguments, or used in control structures. A programming language is said to support first-class functions if it treats functions as first-class objects. Python supports the concept of First Class functions.
Properties of first class functions:
A function is an instance of the Object type.
You can store the function in a variable.</description>
    </item>
    
    <item>
      <title>Python Closures </title>
      <link>/python/python-closures-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-closures-/</guid>
      <description>Python Closures Before seeing what a closure is, we have to first understand what nested functions and non-local variables are. Nested functions in Python A function that is defined inside another function is known as a nested function. Nested functions are able to access variables of the enclosing scope. In Python, these non-local variables can be accessed only within their scope and not outside their scope. This can be illustrated by the following example: Python3 # Python program to illustrate # nested functions def outerFunction(text): def innerFunction(): print(text) innerFunction() if __name__ == &#39;__main__&#39;: outerFunction(&#39;Hey!</description>
    </item>
    
    <item>
      <title>Decorators in Python </title>
      <link>/python/decorators-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/decorators-in-python-/</guid>
      <description>Decorators in Python Decorators are a very powerful and useful tool in Python since it allows programmers to modify the behaviour of a function or class. Decorators allow us to wrap another function in order to extend the behaviour of the wrapped function, without permanently modifying it. But before diving deep into decorators let us understand some concepts that will come in handy in learning the decorators.
First Class ObjectsIn Python, functions are first class objects which means that functions in Python can be used or passed as arguments.</description>
    </item>
    
    <item>
      <title>Decorators with parameters in Python </title>
      <link>/python/decorators-with-parameters-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/decorators-with-parameters-in-python-/</guid>
      <description>Decorators with parameters in Python Prerequisite: Decorators in Python, Function Decorators
We know Decorators are a very powerful and useful tool in Python since it allows programmers to modify the behavior of function or class. In this article, we will learn about the Decorators with Parameters with help of multiple examples. Python functions are First Class citizens which means that functions can be treated similarly to objects. Function can be assigned to a variable i.</description>
    </item>
    
    <item>
      <title>Memoization using decorators in Python </title>
      <link>/python/memoization-using-decorators-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/memoization-using-decorators-in-python-/</guid>
      <description>Memoization using decorators in Python Recursion is a programming technique where a function calls itself repeatedly till a termination condition is met. Some of the examples where recursion is used are calculation of fibonacci series, factorial, etc. But the issue with them is that in the recursion tree, there can be chances that the sub-problem that is already solved is being solved again, which adds to overhead.Memoization is a technique of recording the intermediate results so that it can be used to avoid repeated calculations and speed up the programs.</description>
    </item>
    
    <item>
      <title>Python Classes and Objects </title>
      <link>/python/python-classes-and-objects-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-classes-and-objects-/</guid>
      <description>Python Classes and Objects A class is a user-defined blueprint or prototype from which objects are created. Classes provide a means of bundling data and functionality together. Creating a new class creates a new type of object, allowing new instances of that type to be made. Each class instance can have attributes attached to it for maintaining its state. Class instances can also have methods (defined by their class) for modifying their state.</description>
    </item>
    
    <item>
      <title>Constructors in Python </title>
      <link>/python/constructors-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/constructors-in-python-/</guid>
      <description>Constructors in Python Prerequisites: Object-Oriented Programming in Python, Object-Oriented Programming in Python | Set 2 Constructors are generally used for instantiating an object. The task of constructors is to initialize(assign values) to the data members of the class when an object of the class is created. In Python the __init__() method is called the constructor and is always called when an object is created.Syntax of constructor declaration : def __init__(self): # body of the constructor Types of constructors : default constructor: The default constructor is a simple constructor which doesn&amp;rsquo;t accept any arguments.</description>
    </item>
    
    <item>
      <title>Destructors in Python </title>
      <link>/python/destructors-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/destructors-in-python-/</guid>
      <description>Destructors in Python Constructors in PythonDestructors are called when an object gets destroyed. In Python, destructors are not needed as much as in C++ because Python has a garbage collector that handles memory management automatically. The __del__() method is a known as a destructor method in Python. It is called when all references to the object have been deleted i.e when an object is garbage collected. Syntax of destructor declaration : def __del__(self): # body of destructor Note : A reference to objects is also deleted when the object goes out of reference or when the program ends.</description>
    </item>
    
    <item>
      <title>Inheritance in Python </title>
      <link>/python/inheritance-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/inheritance-in-python-/</guid>
      <description>Inheritance in Python One of the core concepts in object-oriented programming (OOP) languages is inheritance. It is a mechanism that allows you to create a hierarchy of classes that share a set of properties and methods by deriving a class from another class. Inheritance is the capability of one class to derive or inherit the properties from another class. Benefits of inheritance are: It represents real-world relationships well.
It provides the reusability of a code.</description>
    </item>
    
    <item>
      <title>Types of inheritance Python </title>
      <link>/python/types-of-inheritance-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/types-of-inheritance-python-/</guid>
      <description>Types of inheritance Python Inheritance is defined as the mechanism of inheriting the properties of the base class to the child class. Here we a going to see the types of inheritance in Python.
Types of Inheritance in Python Types of Inheritance depend upon the number of child and parent classes involved. There are four types of inheritance in Python:
Single Inheritance: Single inheritance enables a derived class to inherit properties from a single parent class, thus enabling code reusability and the addition of new features to existing code.</description>
    </item>
    
    <item>
      <title>Encapsulation in Python </title>
      <link>/python/encapsulation-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/encapsulation-in-python-/</guid>
      <description>Encapsulation in Python Encapsulation is one of the fundamental concepts in object-oriented programming (OOP). It describes the idea of wrapping data and the methods that work on data within one unit. This puts restrictions on accessing variables and methods directly and can prevent the accidental modification of data. To prevent accidental change, an object&amp;rsquo;s variable can only be changed by an object&amp;rsquo;s method. Those types of variables are known as private variables.</description>
    </item>
    
    <item>
      <title>Polymorphism in Python </title>
      <link>/python/polymorphism-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/polymorphism-in-python-/</guid>
      <description>Polymorphism in Python What is Polymorphism: The word polymorphism means having many forms. In programming, polymorphism means the same function name (but different signatures) being used for different types. The key difference is the data types and number of arguments used in function.
Example of inbuilt polymorphic functions:
Python3 # Python program to demonstrate in-built poly- # morphic functions # len() being used for a string print(len(&amp;quot;Renewbuy&amp;quot;)) # len() being used for a list print(len([10, 20, 30])) 5 3 Examples of user-defined polymorphic functions: Python3 # A simple Python function to demonstrate # Polymorphism def add(x, y, z = 0): return x + y+z # Driver code print(add(2, 3)) print(add(2, 3, 4)) 5 9 Polymorphism with class methods: The below code shows how Python can use two different class types, in the same way.</description>
    </item>
    
    <item>
      <title>Class or Static Variables in Python </title>
      <link>/python/class-or-static-variables-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/class-or-static-variables-in-python-/</guid>
      <description>Class or Static Variables in Python All objects share class or static variables. An instance or non-static variables are different for different objects (every object has a copy). For example, let a Computer Science Student be represented by a class CSStudent. The class may have a static variable whose value is &amp;ldquo;cse&amp;rdquo; for all objects. And class may also have non-static members like name and roll.
In C++ and Java, we can use static keywords to make a variable a class variable.</description>
    </item>
    
    <item>
      <title>Class method vs Static method in Python </title>
      <link>/python/class-method-vs-static-method-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/class-method-vs-static-method-in-python-/</guid>
      <description>Class method vs Static method in Python In this article, we will cover the basic difference between the class method vs Static method in Python and when to use the class method and static method in python.
What is Class Method in Python? The @classmethod decorator is a built-in function decorator that is an expression that gets evaluated after your function is defined. The result of that evaluation shadows your function definition.</description>
    </item>
    
    <item>
      <title>Python Exception Handling </title>
      <link>/python/python-exception-handling-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-exception-handling-/</guid>
      <description>Python Exception Handling We have explored basic python till now from Set 1 to 4 (Set 1 | Set 2 | Set 3 | Set 4). In this article, we will discuss how to handle exceptions in Python using try, except, and finally statements with the help of proper examples. Error in Python can be of two types i.e. Syntax errors and Exceptions. Errors are problems in a program due to which the program will stop the execution.</description>
    </item>
    
    <item>
      <title>Python Try Except </title>
      <link>/python/python-try-except-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-try-except-/</guid>
      <description>Python Try Except Error in Python can be of two types i.e. Syntax errors and Exceptions. Errors are the problems in a program due to which the program will stop the execution. On the other hand, exceptions are raised when some internal events occur which changes the normal flow of the program.Note: For more information, refer to Errors and Exceptions in PythonSome of the common Exception Errors are : IOError: if the file can&amp;rsquo;t be opened</description>
    </item>
    
    <item>
      <title>Errors and Exceptions in Python </title>
      <link>/python/errors-and-exceptions-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/errors-and-exceptions-in-python-/</guid>
      <description>Errors and Exceptions in Python Errors are the problems in a program due to which the program will stop the execution. On the other hand, exceptions are raised when some internal events occur which changes the normal flow of the program. Two types of Error occurs in python. Syntax errors
Logical errors (Exceptions) Syntax errors When the proper syntax of the language is not followed then a syntax error is thrown.</description>
    </item>
    
    <item>
      <title>Built-in Exceptions in Python </title>
      <link>/python/built-in-exceptions-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/built-in-exceptions-in-python-/</guid>
      <description>Built-in Exceptions in Python All instances in Python must be instances of a class that derives from BaseException. Two exception classes that are not related via subclassing are never equivalent, even if they have the same name. The built-in exceptions can be generated by the interpreter or built-in functions.
There are several built-in exceptions in Python that are raised when errors occur. These built-in exceptions can be viewed using the local() built-in functions as follows :</description>
    </item>
    
    <item>
      <title>User-defined Exceptions in Python with Examples </title>
      <link>/python/user-defined-exceptions-in-python-with-examples-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/user-defined-exceptions-in-python-with-examples-/</guid>
      <description>User-defined Exceptions in Python with Examples Prerequisite: This article is an extension to Exception Handling.
In this article, we will try to cover How to Define Custom Exceptions in Python with Examples. Example: class CustomError(Exception): pass raise CustomError(&amp;quot;Example of Custom Exceptions in Python&amp;quot;) Output: CustomError: Example of Custom Exceptions in Python Python throws errors and exceptions when the code goes wrong, which may cause the program to stop abruptly. Python also provides an exception handling method with the help of try-except.</description>
    </item>
    
    <item>
      <title>NZEC error in Python </title>
      <link>/python/nzec-error-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/nzec-error-in-python-/</guid>
      <description>NZEC error in Python While coding in various competitive sites, many people must have encountered NZEC errors. NZEC (non zero exit code) as the name suggests occurs when your code is failed to return 0. When a code returns 0 it means it is successfully executed otherwise it will return some other number depending on the type of error. When the program ends and it is supposed to return &amp;ldquo;0&amp;rdquo; to indicate if finished fine and is not able to do so it causes NZEC.</description>
    </item>
    
    <item>
      <title>File Handling in Python </title>
      <link>/python/file-handling-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/file-handling-in-python-/</guid>
      <description>File Handling in Python Python too supports file handling and allows users to handle files i.e., to read and write files, along with many other file handling options, to operate on files. The concept of file handling has stretched over various other languages, but the implementation is either complicated or lengthy, but like other concepts of Python, this concept here is also easy and short. Python treats files differently as text or binary and this is important.</description>
    </item>
    
    <item>
      <title>Open a File in Python </title>
      <link>/python/open-a-file-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/open-a-file-in-python-/</guid>
      <description>Open a File in Python Python provides inbuilt functions for creating, writing, and reading files. There are two types of files that can be handled in Python, normal text files and binary files (written in binary language, 0s, and 1s).
Text files: In this type of file, each line of text is terminated with a special character called EOL (End of Line), which is the new line character (&amp;rsquo;\n&amp;rsquo;) in Python by default.</description>
    </item>
    
    <item>
      <title>How to read from a file in Python </title>
      <link>/python/how-to-read-from-a-file-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/how-to-read-from-a-file-in-python-/</guid>
      <description>How to read from a file in Python Python provides inbuilt functions for creating, writing and reading files. There are two types of files that can be handled in python, normal text files and binary files (written in binary language, 0s and 1s).
Text files: In this type of file, Each line of text is terminated with a special character called EOL (End of Line), which is the new line character (&amp;rsquo;\n&amp;rsquo;) in python by default.</description>
    </item>
    
    <item>
      <title>Writing to file in Python </title>
      <link>/python/writing-to-file-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/writing-to-file-in-python-/</guid>
      <description>Writing to file in Python Python provides inbuilt functions for creating, writing and reading files. There are two types of files that can be handled in python, normal text files and binary files (written in binary language, 0s and 1s).
Text files: In this type of file, Each line of text is terminated with a special character called EOL (End of Line), which is the new line character (&amp;rsquo;\n&amp;rsquo;) in python by default.</description>
    </item>
    
    <item>
      <title>Python append to a file </title>
      <link>/python/python-append-to-a-file-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-append-to-a-file-/</guid>
      <description>Python append to a file While reading or writing to a file, access mode governs the type of operations possible in the opened file. It refers to how the file will be used once it&amp;rsquo;s opened. These modes also define the location of the File Handle in the file. The definition of these access modes is as follows:
Append Only (&amp;lsquo;a&amp;rsquo;): Open the file for writing.
Append and Read (&amp;lsquo;a+&amp;rsquo;): Open the file for reading and writing.</description>
    </item>
    
    <item>
      <title>Regular Expression in Python with Examples | Set 1 </title>
      <link>/python/regular-expression-in-python-with-examples-set-1-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/regular-expression-in-python-with-examples-set-1-/</guid>
      <description>Regular Expression in Python with Examples | Set 1 A Regular Expressions (RegEx) is a special sequence of characters that uses a search pattern to find a string or set of strings. It can detect the presence or absence of a text by matching it with a particular pattern, and also can split a pattern into one or more sub-patterns. Python provides a re module that supports the use of regex in Python.</description>
    </item>
    
    <item>
      <title>Regular Expressions in Python -- Set 2 (Search, Match and Find All) </title>
      <link>/python/regular-expressions-in-python--set-2-search-match-and-find-all-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/regular-expressions-in-python--set-2-search-match-and-find-all-/</guid>
      <description>Regular Expressions in Python &amp;ndash; Set 2 (Search, Match and Find All) Regular Expression in Python with Examples | Set 1The module re provides support for regular expressions in Python. Below are main methods in this module.
Searching an occurrence of pattern re.search() : This method either returns None (if the pattern doesn&amp;rsquo;t match), or a re.MatchObject that contains information about the matching part of the string. This method stops after the first match, so this is best suited for testing a regular expression more than extracting data.</description>
    </item>
    
    <item>
      <title>Python Regex: re.search() VS re.findall() </title>
      <link>/python/python-regex-re.search-vs-re.findall-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-regex-re.search-vs-re.findall-/</guid>
      <description>Python Regex: re.search() VS re.findall() Prerequisite: Regular Expression with Examples | Python
A Regular expression (sometimes called a Rational expression) is a sequence of characters that define a search pattern, mainly for use in pattern matching with strings, or string matching, i.e. &amp;ldquo;find and replace&amp;rdquo;-like operations. Regular expressions are a generalized way to match patterns with sequences of characters.
Module Regular Expressions (RE) specifies a set of strings (pattern) that matches it.</description>
    </item>
    
    <item>
      <title>Verbose in Python Regex </title>
      <link>/python/verbose-in-python-regex-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/verbose-in-python-regex-/</guid>
      <description>Verbose in Python Regex In this article, we will learn about VERBOSE flag of the re package and how to use it.
re.VERBOSE : This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments.Whitespace within the pattern is ignored, except when in a character class, or when preceded by an unescaped backslash, or within tokens like *?</description>
    </item>
    
    <item>
      <title>Password validation in Python </title>
      <link>/python/password-validation-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/password-validation-in-python-/</guid>
      <description>Password validation in Python Let&amp;rsquo;s take a password as a combination of alphanumeric characters along with special characters, and check whether the password is valid or not with the help of few conditions. Conditions for a valid password are:
Should have at least one number.
Should have at least one uppercase and one lowercase character.
Should have at least one special symbol.
Should be between 6 to 20 characters long.</description>
    </item>
    
    <item>
      <title>Python Collections Module </title>
      <link>/python/python-collections-module-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-collections-module-/</guid>
      <description>Python Collections Module The collection Module in Python provides different types of containers. A Container is an object that is used to store different objects and provide a way to access the contained objects and iterate over them. Some of the built-in containers are Tuple, List, Dictionary, etc. In this article, we will discuss the different containers provided by the collections module.
Table of Content:
Counters
OrderedDict
DefaultDict
ChainMap
NamedTuple</description>
    </item>
    
    <item>
      <title>Counters in Python | Set 1 (Initialization and Updation) </title>
      <link>/python/counters-in-python-set-1-initialization-and-updation-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/counters-in-python-set-1-initialization-and-updation-/</guid>
      <description>Counters in Python | Set 1 (Initialization and Updation) Counter is a container included in the collections module. Now you all must be wondering what is a container. Don&amp;rsquo;t worry first let&amp;rsquo;s discuss about the container. What is Container? Containers are objects that hold objects. They provide a way to access the contained objects and iterate over them. Examples of built in containers are Tuple, list, and dictionary. Others are included in Collections module.</description>
    </item>
    
    <item>
      <title>OrderedDict in Python </title>
      <link>/python/ordereddict-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/ordereddict-in-python-/</guid>
      <description>OrderedDict in Python An OrderedDict is a dictionary subclass that remembers the order that keys were first inserted. The only difference between dict() and OrderedDict() is that:
OrderedDict preserves the order in which the keys are inserted. A regular dict doesn&amp;rsquo;t track the insertion order and iterating it gives the values in an arbitrary order. By contrast, the order the items are inserted is remembered by OrderedDict.
Python3 # A Python program to demonstrate working of OrderedDict from collections import OrderedDict print(&amp;quot;This is a Dict:\n&amp;quot;) d = {} d[&#39;a&#39;] = 1 d[&#39;b&#39;] = 2 d[&#39;c&#39;] = 3 d[&#39;d&#39;] = 4 for key, value in d.</description>
    </item>
    
    <item>
      <title>Defaultdict in Python </title>
      <link>/python/defaultdict-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/defaultdict-in-python-/</guid>
      <description>Defaultdict in Python Dictionary in Python is an unordered collection of data values that are used to store data values like a map. Unlike other Data Types that hold only single value as an element, the Dictionary holds key-value pair. In Dictionary, the key must be unique and immutable. This means that a Python Tuple can be a key whereas a Python List can not. A Dictionary can be created by placing a sequence of elements within curly {} braces, separated by &amp;lsquo;comma&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>ChainMap in Python </title>
      <link>/python/chainmap-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/chainmap-in-python-/</guid>
      <description>ChainMap in Python Python contains a container called &amp;ldquo;ChainMap&amp;rdquo; which encapsulates many dictionaries into one unit. ChainMap is member of module &amp;ldquo;collections&amp;rdquo;.
Example:
# Python program to demonstrate # ChainMap from collections import ChainMap d1 = {&#39;a&#39;: 1, &#39;b&#39;: 2} d2 = {&#39;c&#39;: 3, &#39;d&#39;: 4} d3 = {&#39;e&#39;: 5, &#39;f&#39;: 6} # Defining the chainmap c = ChainMap(d1, d2, d3) print(c) Output:
ChainMap({&#39;a&#39;: 1, &#39;b&#39;: 2}, {&#39;c&#39;: 3, &#39;d&#39;: 4}, {&#39;e&#39;: 5, &#39;f&#39;: 6}) Let&amp;rsquo;s see various Operations on ChainMap</description>
    </item>
    
    <item>
      <title>Namedtuple in Python </title>
      <link>/python/namedtuple-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/namedtuple-in-python-/</guid>
      <description>Namedtuple in Python Python supports a type of container dictionaries called &amp;ldquo;namedtuple()&amp;rdquo; present in the module, &amp;ldquo;collections&amp;rdquo;. Like dictionaries, they contain keys that are hashed to a particular value. But on contrary, it supports both access from key-value and iteration, the functionality that dictionaries lack.
Example: Python3 # Python code to demonstrate namedtuple() from collections import namedtuple # Declaring namedtuple() Student = namedtuple(&#39;Student&#39;, [&#39;name&#39;, &#39;age&#39;, &#39;DOB&#39;]) # Adding values S = Student(&#39;Nandini&#39;, &#39;19&#39;, &#39;2541997&#39;) # Access using index print(&amp;quot;The Student age using index is : &amp;quot;, end=&amp;quot;&amp;quot;) print(S[1]) # Access using name print(&amp;quot;The Student name using keyname is : &amp;quot;, end=&amp;quot;&amp;quot;) print(S.</description>
    </item>
    
    <item>
      <title>Deque in Python </title>
      <link>/python/deque-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/deque-in-python-/</guid>
      <description>Deque in Python Deque (Doubly Ended Queue) in Python is implemented using the module &amp;ldquo;collections&amp;rdquo;. Deque is preferred over a list in the cases where we need quicker append and pop operations from both the ends of the container, as deque provides an O(1) time complexity for append and pop operations as compared to a list that provides O(n) time complexity.
Types of Restricted Deque Input Input Restricted Deque: Input is limited at one end while deletion is permitted at both ends.</description>
    </item>
    
    <item>
      <title>Heap queue (or heapq) in Python </title>
      <link>/python/heap-queue-or-heapq-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/heap-queue-or-heapq-in-python-/</guid>
      <description>Heap queue (or heapq) in Python Heap data structure is mainly used to represent a priority queue. In Python, it is available using the &amp;ldquo;heapq&amp;rdquo; module. The property of this data structure in Python is that each time the smallest heap element is popped(min-heap). Whenever elements are pushed or popped, heap structure is maintained. The heap[0] element also returns the smallest element each time. Let&amp;rsquo;s see various Operations on the heap in Python.</description>
    </item>
    
    <item>
      <title>Collections.UserDict in Python </title>
      <link>/python/collections.userdict-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/collections.userdict-in-python-/</guid>
      <description>Collections.UserDict in Python An unordered collection of data values that are used to store data values like a map is known as Dictionary in Python. Unlike other Data Types that hold only a single value as an element, Dictionary holds key:value pair. Key-value is provided in the dictionary to make it more optimized.
Note: For more information, refer to Python Dictionary
Collections.UserDict Python supports a dictionary like a container called UserDict present in the collections module.</description>
    </item>
    
    <item>
      <title>Collections.UserList in Python </title>
      <link>/python/collections.userlist-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/collections.userlist-in-python-/</guid>
      <description>Collections.UserList in Python Python Lists are array-like data structure but unlike it can be homogeneous. A single list may contain DataTypes like Integers, Strings, as well as Objects. List in Python are ordered and have a definite count. The elements in a list are indexed according to a definite sequence and the indexing of a list is done with 0 being the first index. Note: For more information, refer to Python List Collections.</description>
    </item>
    
    <item>
      <title>Collections.UserString in Python </title>
      <link>/python/collections.userstring-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/collections.userstring-in-python-/</guid>
      <description>Collections.UserString in Python Strings are the arrays of bytes representing Unicode characters. However, Python does not support the character data type. A character is a string of length one. Example:
Python3 # Python program to demonstrate # string # Creating a String # with single Quotes String1 = &#39;Welcome to the Renewbuy World&#39; print(&amp;quot;String with the use of Single Quotes: &amp;quot;) print(String1) # Creating a String # with double Quotes String1 = &amp;quot;I&#39;m a Geek&amp;quot; print(&amp;quot;\nString with the use of Double Quotes: &amp;quot;) print(String1) Output:</description>
    </item>
    
    <item>
      <title>OS Module in Python with Examples </title>
      <link>/python/os-module-in-python-with-examples-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/os-module-in-python-with-examples-/</guid>
      <description>OS Module in Python with Examples The OS module in Python provides functions for interacting with the operating system. OS comes under Python&amp;rsquo;s standard utility modules. This module provides a portable way of using operating system-dependent functionality. The *os* and *os.path* modules include many functions to interact with the file system. Handling the Current Working Directory Consider Current Working Directory(CWD) as a folder, where the Python is operating. Whenever the files are called only by their name, Python assumes that it starts in the CWD which means that name-only reference will be successful only if the file is in the Python&amp;rsquo;s CWD.</description>
    </item>
    
    <item>
      <title>Functional Programming in Python </title>
      <link>/python/functional-programming-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/functional-programming-in-python-/</guid>
      <description>Functional Programming in Python Functional programming is a programming paradigm in which we try to bind everything in pure mathematical functions style. It is a declarative type of programming style. Its main focus is on &amp;ldquo;what to solve&amp;rdquo; in contrast to an imperative style where the main focus is &amp;ldquo;how to solve&amp;rdquo;. It uses expressions instead of statements. An expression is evaluated to produce a value whereas a statement is executed to assign variables.</description>
    </item>
    
    <item>
      <title>Metaprogramming with Metaclasses in Python </title>
      <link>/python/metaprogramming-with-metaclasses-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/metaprogramming-with-metaclasses-in-python-/</guid>
      <description>Metaprogramming with Metaclasses in Python At first, the word Metaprogramming seems like a very funky and alien thing but if you have ever worked with decorators or metaclasses, you were doing metaprogramming there all along. In a nutshell, we can say metaprogramming is the code that manipulates code.In this article, we are going to discuss Metaclasses, why and when we should use them, and what are the alternatives. This is a fairly advance Python topic and the following prerequisite is expected &amp;ndash; OOP concept in Python</description>
    </item>
    
    <item>
      <title>Abstract Classes in Python </title>
      <link>/python/abstract-classes-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/abstract-classes-in-python-/</guid>
      <description>Abstract Classes in Python An abstract class can be considered as a blueprint for other classes. It allows you to create a set of methods that must be created within any child classes built from the abstract class. A class which contains one or more abstract methods is called an abstract class. An abstract method is a method that has a declaration but does not have an implementation. While we are designing large functional units we use an abstract class.</description>
    </item>
    
    <item>
      <title>Multithreading in Python | Set 1 </title>
      <link>/python/multithreading-in-python-set-1-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/multithreading-in-python-set-1-/</guid>
      <description>Multithreading in Python | Set 1 This article covers the basics of multithreading in Python programming language. Just like multiprocessing, multithreading is a way of achieving multitasking. In multithreading, the concept of threads is used. Let us first understand the concept of thread in computer architecture.
Thread
In computing, a process is an instance of a computer program that is being executed. Any process has 3 basic components:
An executable program.</description>
    </item>
    
    <item>
      <title>Multithreading in Python | Set 2 (Synchronization) </title>
      <link>/python/multithreading-in-python-set-2-synchronization-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/multithreading-in-python-set-2-synchronization-/</guid>
      <description>Multithreading in Python | Set 2 (Synchronization) This article discusses the concept of thread synchronization in case of multithreading in Python programming language.
Synchronization between threads
Thread synchronization is defined as a mechanism which ensures that two or more concurrent threads do not simultaneously execute some particular program segment known as critical section.
Critical section refers to the parts of the program where the shared resource is accessed.
For example, in the diagram below, 3 threads try to access shared resource or critical section at the same time.</description>
    </item>
    
    <item>
      <title>Multiprocessing in Python | Set 1 (Introduction) </title>
      <link>/python/multiprocessing-in-python-set-1-introduction-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/multiprocessing-in-python-set-1-introduction-/</guid>
      <description>Multiprocessing in Python | Set 1 (Introduction) This article is a brief yet concise introduction to multiprocessing in Python programming language.
What is multiprocessing?
Multiprocessing refers to the ability of a system to support more than one processor at the same time. Applications in a multiprocessing system are broken to smaller routines that run independently. The operating system allocates these threads to the processors improving performance of the system.
Why multiprocessing?</description>
    </item>
    
    <item>
      <title>Multiprocessing in Python | Set 2 (Communication between processes) </title>
      <link>/python/multiprocessing-in-python-set-2-communication-between-processes-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/multiprocessing-in-python-set-2-communication-between-processes-/</guid>
      <description>Multiprocessing in Python | Set 2 (Communication between processes) Multiprocessing in Python | Set 1These articles discusses the concept of data sharing and message passing between processes while using multiprocessing module in Python.In multiprocessing, any newly created process will do following:
run independently
have their own memory space.
Consider the program below to understand this concept:
import multiprocessing # empty list with global scope result = [] def square_list(mylist): &amp;quot;&amp;quot;&amp;quot; function to square a given list &amp;quot;&amp;quot;&amp;quot; global result # append squares of mylist to global list result for num in mylist: result.</description>
    </item>
    
    <item>
      <title>Socket Programming in Python </title>
      <link>/python/socket-programming-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/socket-programming-in-python-/</guid>
      <description>Socket Programming in Python Socket programming is a way of connecting two nodes on a network to communicate with each other. One socket(node) listens on a particular port at an IP, while the other socket reaches out to the other to form a connection. The server forms the listener socket while the client reaches out to the server. They are the real backbones behind web browsing. In simpler terms, there is a server and a client.</description>
    </item>
    
    <item>
      <title>Socket Programming with Multi-threading in Python </title>
      <link>/python/socket-programming-with-multi-threading-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/socket-programming-with-multi-threading-in-python-/</guid>
      <description>Socket Programming with Multi-threading in Python Prerequisite : Socket Programming in Python, Multi-threading in PythonSocket Programming-&amp;gt; It helps us to connect a client to a server. Client is message sender and receiver and server is just a listener that works on data sent by client.What is a Thread? A thread is a light-weight process that does not require much memory overhead, they are cheaper than processes.What is Multi-threading Socket Programming? port on your computerMultithreading is a process of executing multiple threads simultaneously in a single process.</description>
    </item>
    
    <item>
      <title>NumPy Tutorial </title>
      <link>/python/numpy-tutorial-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/numpy-tutorial-/</guid>
      <description>NumPy Tutorial Python NumPy is a general-purpose array processing package which provides tools for handling the n-dimensional arrays. It provides various computing tools such as comprehensive mathematical functions, linear algebra routines. NumPy provides both the flexibility of Python and the speed of well-optimized compiled C code. It&amp;rsquo;s easy to use syntax makes it highly accessible and productive for programmers from any background.
This NumPy tutorial helps you learn the fundamentals of NumPy from Basics to Advance, like operations on NumPy array, matrices using a huge dataset of NumPy &amp;ndash; programs and projects.</description>
    </item>
    
    <item>
      <title>Python Numpy </title>
      <link>/python/python-numpy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-numpy-/</guid>
      <description>Python Numpy Numpy is a general-purpose array-processing package. It provides a high-performance multidimensional array object, and tools for working with these arrays. It is the fundamental package for scientific computing with Python.Besides its obvious scientific uses, Numpy can also be used as an efficient multi-dimensional container of generic data.
Arrays in Numpy Array in Numpy is a table of elements (usually numbers), all of the same type, indexed by a tuple of positive integers.</description>
    </item>
    
    <item>
      <title>Numpy | ndarray </title>
      <link>/python/numpy-ndarray-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/numpy-ndarray-/</guid>
      <description>Numpy | ndarray N-Dimensional array(ndarray) in Numpy Array in Numpy is a table of elements (usually numbers), all of the same type, indexed by a tuple of positive integers. In Numpy, number of dimensions of the array is called rank of the array.A tuple of integers giving the size of the array along each dimension is known as shape of the array. An array class in Numpy is called as ndarray.</description>
    </item>
    
    <item>
      <title>Numpy | Array Creation </title>
      <link>/python/numpy-array-creation-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/numpy-array-creation-/</guid>
      <description>Numpy | Array Creation Array creation using List : Arrays are used to store multiple values in one single variable.Python does not have built-in support for Arrays, but Python lists can be used instead.Example :
Output:
Array creation using array functions :array(data type, value list) function is used to create an array with data type and value list specified in its arguments.Example :
Output:
Array creation using numpy methods :NumPy offers several functions to create arrays with initial placeholder content.</description>
    </item>
    
    <item>
      <title>Numpy | Indexing </title>
      <link>/python/numpy-indexing-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/numpy-indexing-/</guid>
      <description>Numpy | Indexing NumPy or Numeric Python is a package for computation on homogenous n-dimensional arrays. In numpy dimensions are called as axes.
Why do we need NumPy ?
A question arises that why do we need NumPy when python lists are already there. The answer to it is we cannot perform operations on all the elements of two list directly. For example, we cannot multiply two lists directly we will have to do it element-wise.</description>
    </item>
    
    <item>
      <title>Basic Slicing and Advanced Indexing in NumPy Python </title>
      <link>/python/basic-slicing-and-advanced-indexing-in-numpy-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/basic-slicing-and-advanced-indexing-in-numpy-python-/</guid>
      <description>Basic Slicing and Advanced Indexing in NumPy Python Prerequisites : Numpy in Python IntroductionNumPy or Numeric Python is a package for computation on homogeneous n-dimensional arrays. In numpy dimensions are called as axes.
Why do we need NumPy ?
A question arises that why do we need NumPy when python lists are already there. The answer to it is we cannot perform operations on all the elements of two list directly.</description>
    </item>
    
    <item>
      <title>Numpy | Data Type Objects </title>
      <link>/python/numpy-data-type-objects-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/numpy-data-type-objects-/</guid>
      <description>Numpy | Data Type Objects Every ndarray has an associated data type (dtype) object. This data type object (dtype) informs us about the layout of the array. This means it gives us information about :
Type of the data (integer, float, Python object etc.)
Size of the data (number of bytes)
Byte order of the data (little-endian or big-endian)
If the data type is a sub-array, what is its shape and data type.</description>
    </item>
    
    <item>
      <title>Numpy | Iterating Over Array </title>
      <link>/python/numpy-iterating-over-array-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/numpy-iterating-over-array-/</guid>
      <description>Numpy | Iterating Over Array NumPy package contains an iterator object numpy.nditer. It is an efficient multidimensional iterator object using which it is possible to iterate over an array. Each element of an array is visited using Python&amp;rsquo;s standard Iterator interface.
Output:
The order of iteration is chosen to match the memory layout of an array, without considering a particular ordering. This can be seen by iterating over the transpose of the above array.</description>
    </item>
    
    <item>
      <title>Numpy | Binary Operations </title>
      <link>/python/numpy-binary-operations-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/numpy-binary-operations-/</guid>
      <description>Numpy | Binary Operations Binary operators acts on bits and performs bit by bit operation. Binary operation is simply a rule for combining two values to create a new value.
numpy.bitwise_and() : This function is used to Compute the bit-wise AND of two array element-wise. This function computes the bit-wise AND of the underlying binary representation of the integers in the input arrays.
Code #1 :
Output :
Code #2 :</description>
    </item>
    
    <item>
      <title>Numpy | Mathematical Function </title>
      <link>/python/numpy-mathematical-function-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/numpy-mathematical-function-/</guid>
      <description>Numpy | Mathematical Function NumPy contains a large number of various mathematical operations. NumPy provides standard trigonometric functions, functions for arithmetic operations, handling complex numbers, etc.
Trigonometric Functions &amp;ndash;NumPy has standard trigonometric functions which return trigonometric ratios for a given angle in radians.
numpy.sin(x[, out]) = ufunc &amp;lsquo;sin&amp;rsquo;) : This mathematical function helps user to calculate trignmetric sine for all x(being the array elements).
Output :
numpy.cos(x[, out]) = ufunc &amp;lsquo;cos&amp;rsquo;) : This mathematical function helps user to calculate trignmetric cosine for all x(being the array elements).</description>
    </item>
    
    <item>
      <title>Numpy | String Operations </title>
      <link>/python/numpy-string-operations-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/numpy-string-operations-/</guid>
      <description>Numpy | String Operations This module is used to perform vectorized string operations for arrays of dtype numpy.string_ or numpy.unicode_. All of them are based on the standard string functions in Python&amp;rsquo;s built-in library.
String Operations &amp;ndash;numpy.lower() : This function returns the lowercase string from the given string. It converts all uppercase characters to lowercase. If no uppercase characters exist, it returns the original string.
Output :
numpy.split() : This function returns a list of strings after breaking the given string by the specified separator.</description>
    </item>
    
    <item>
      <title>Numpy | Linear Algebra </title>
      <link>/python/numpy-linear-algebra-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/numpy-linear-algebra-/</guid>
      <description>Numpy | Linear Algebra The Linear Algebra module of NumPy offers various methods to apply linear algebra on any numpy array.One can find:
rank, determinant, trace, etc. of an array.
eigen values of matrices
matrix and vector products (dot, inner, outer,etc. product), matrix exponentiation
solve linear or tensor equations and much more!
Output:
Matrix eigenvalues Functions numpy.linalg.eigh(a, UPLO=&amp;lsquo;L&amp;rsquo;) : This function is used to return the eigenvalues and eigenvectors of a complex Hermitian (conjugate symmetric) or a real symmetric matrix.</description>
    </item>
    
    <item>
      <title>Numpy | Sorting, Searching and Counting </title>
      <link>/python/numpy-sorting-searching-and-counting-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/numpy-sorting-searching-and-counting-/</guid>
      <description>Numpy | Sorting, Searching and Counting Sorting Sorting refers to arranging data in a particular format. Sorting algorithm specifies the way to arrange data in a particular order. Most common orders are in numerical or lexicographical order. In Numpy, we can perform various sorting operations using the various functions that are provided in the library like sort, lexsort, argsort etc.
numpy.sort() : This function returns a sorted copy of an array.</description>
    </item>
    
    <item>
      <title>Random sampling in numpy | randint() function </title>
      <link>/python/random-sampling-in-numpy-randint-function-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/random-sampling-in-numpy-randint-function-/</guid>
      <description>Random sampling in numpy | randint() function numpy.random.randint() is one of the function for doing random sampling in numpy. It returns an array of specified shape and fills it with random integers from low (inclusive) to high (exclusive), i.e. in the interval [low, high).
Syntax : numpy.random.randint(low, high=None, size=None, dtype=&amp;lsquo;l&amp;rsquo;)
Parameters :low : [int] Lowest (signed) integer to be drawn from the distribution.But, it works as a highest integer in the sample if high=None.</description>
    </item>
    
    <item>
      <title>Random sampling in numpy | random_sample() function </title>
      <link>/python/random-sampling-in-numpy-random_sample-function-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/random-sampling-in-numpy-random_sample-function-/</guid>
      <description>Random sampling in numpy | random_sample() function numpy.random.random_sample() is one of the function for doing random sampling in numpy. It returns an array of specified shape and fills it with random floats in the half-open interval [0.0, 1.0).
Syntax : numpy.random.random_sample(size=None)
Parameters :size : [int or tuple of ints, optional] Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned.</description>
    </item>
    
    <item>
      <title>Random sampling in numpy | ranf() function </title>
      <link>/python/random-sampling-in-numpy-ranf-function-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/random-sampling-in-numpy-ranf-function-/</guid>
      <description>Random sampling in numpy | ranf() function numpy.random.ranf() is one of the function for doing random sampling in numpy. It returns an array of specified shape and fills it with random floats in the half-open interval [0.0, 1.0).
Syntax : numpy.random.ranf(size=None)
Parameters :size : [int or tuple of ints, optional] Output shape. If the given shape is, e.g., (m, n, k), then m * n * k samples are drawn. Default is None, in which case a single value is returned.</description>
    </item>
    
    <item>
      <title>Random sampling in numpy | random_integers() function </title>
      <link>/python/random-sampling-in-numpy-random_integers-function-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/random-sampling-in-numpy-random_integers-function-/</guid>
      <description>Random sampling in numpy | random_integers() function numpy.random.random_integers() is one of the function for doing random sampling in numpy. It returns an array of specified shape and fills it with random integers from low (inclusive) to high (exclusive), i.e. in the interval [low, high).
Syntax : numpy.random.random_integers(low, high=None, size=None)
Parameters :low : [int] Lowest (signed) integer to be drawn from the distribution.But, it works as a highest integer in the sample if high=None.</description>
    </item>
    
    <item>
      <title>Numpy ufunc | Universal functions </title>
      <link>/python/numpy-ufunc-universal-functions-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/numpy-ufunc-universal-functions-/</guid>
      <description>Numpy ufunc | Universal functions Universal functions in Numpy are simple mathematical functions. It is just a term that we gave to mathematical functions in the Numpy library. Numpy provides various universal functions that cover a wide variety of operations. These functions include standard trigonometric functions, functions for arithmetic operations, handling complex numbers, statistical functions, etc. Universal functions have various characteristics which are as follows- These functions operates on ndarray (N-dimensional array) i.</description>
    </item>
    
    <item>
      <title>Pandas Tutorial </title>
      <link>/python/pandas-tutorial-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/pandas-tutorial-/</guid>
      <description>Pandas Tutorial Pandas is an open-source library that is built on top of NumPy library. It is a Python package that offers various data structures and operations for manipulating numerical data and time series. It is mainly popular for importing and analyzing data much easier. Pandas is fast and it has high-performance &amp;amp; productivity for users.
This Pandas Tutorial will help learning Pandas from Basics to advance data analysis operations, including all necessary functions explained in detail.</description>
    </item>
    
    <item>
      <title>Introduction to Pandas in Python </title>
      <link>/python/introduction-to-pandas-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/introduction-to-pandas-in-python-/</guid>
      <description>Introduction to Pandas in Python Pandas is an open-source library that is made mainly for working with relational or labeled data both easily and intuitively. It provides various data structures and operations for manipulating numerical data and time series. This library is built on top of the NumPy library. Pandas is fast and it has high performance &amp;amp; productivity for users.
Table of Content :
History
Advantages
Getting Started SeriesDataFrame</description>
    </item>
    
    <item>
      <title>How to Install Python Pandas on Windows and Linux? </title>
      <link>/python/how-to-install-python-pandas-on-windows-and-linux-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/how-to-install-python-pandas-on-windows-and-linux-/</guid>
      <description>How to Install Python Pandas on Windows and Linux? Pandas in Python is a package that is written for data analysis and manipulation. Pandas offer various operations and data structures to perform numerical data manipulations and time series. Pandas is an open-source library that is built over Numpy libraries. Pandas library is known for its high productivity and high performance. Pandas are popular because it makes importing and analyzing data much easier.</description>
    </item>
    
    <item>
      <title>Python Pandas DataFrame </title>
      <link>/python/python-pandas-dataframe-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-pandas-dataframe-/</guid>
      <description>Python Pandas DataFrame Pandas DataFrame is two-dimensional size-mutable, potentially heterogeneous tabular data structure with labeled axes (rows and columns). A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns. Pandas DataFrame consists of three principal components, the data, rows, and columns.
We will get a brief insight on all these basic operation which can be performed on Pandas DataFrame :</description>
    </item>
    
    <item>
      <title>Creating a Pandas DataFrame </title>
      <link>/python/creating-a-pandas-dataframe-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/creating-a-pandas-dataframe-/</guid>
      <description>Creating a Pandas DataFrame In the real world, a Pandas DataFrame will be created by loading the datasets from existing storage, storage can be SQL Database, CSV file, and Excel file. Pandas DataFrame can be created from the lists, dictionary, and from a list of dictionary etc. A Dataframe is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns. In dataframe datasets arrange in rows and columns, we can store any number of datasets in a dataframe.</description>
    </item>
    
    <item>
      <title>Python Pandas Series </title>
      <link>/python/python-pandas-series-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-pandas-series-/</guid>
      <description>Python Pandas Series Pandas Series is a one-dimensional labeled array capable of holding data of any type (integer, string, float, python objects, etc.).
Pandas Series Examples Python3 Output :
The axis labels are collectively called index. Pandas Series is nothing but a column in an excel sheet.Labels need not be unique but must be a hashable type. The object supports both integer and label-based indexing and provides a host of methods for performing operations involving the index.</description>
    </item>
    
    <item>
      <title>Creating a Pandas Series </title>
      <link>/python/creating-a-pandas-series-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/creating-a-pandas-series-/</guid>
      <description>Creating a Pandas Series Pandas Series is a one-dimensional labeled array capable of holding data of any type (integer, string, float, python objects, etc.). The axis labels are collectively called index. Labels need not be unique but must be a hashable type. The object supports both integer and label-based indexing and provides a host of methods for performing operations involving the index. To create Series with any of the methods make sure to import pandas library.</description>
    </item>
    
    <item>
      <title>Python | Pandas DataframeSeries.head() method </title>
      <link>/python/python-pandas-dataframeseries.head-method-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-pandas-dataframeseries.head-method-/</guid>
      <description>Python | Pandas Dataframe/Series.head() method Python is a great language for doing data analysis, primarily because of the fantastic ecosystem of data-centric Python packages. Pandas is one of those packages and makes importing and analyzing data much easier.
Pandas head() method is used to return top n (5 by default) rows of a data frame or series.
Syntax: Dataframe.head(n=5)
Parameters:n: integer value, number of rows to be returned
Return type: Dataframe with top n rows</description>
    </item>
    
    <item>
      <title>Pandas DataFrame describe() Method </title>
      <link>/python/pandas-dataframe-describe-method-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/pandas-dataframe-describe-method-/</guid>
      <description>Pandas DataFrame describe() Method Python is a great language for doing data analysis, primarily because of the fantastic ecosystem of data-centric Python packages. Pandas is one of those packages and makes importing and analyzing data much easier. Pandas DataFrame describe() Pandas describe() is used to view some basic statistical details like percentile, mean, std, etc. of a data frame or a series of numeric values. When this method is applied to a series of strings, it returns a different output which is shown in the examples below.</description>
    </item>
    
    <item>
      <title>Dealing with Rows and Columns in Pandas DataFrame </title>
      <link>/python/dealing-with-rows-and-columns-in-pandas-dataframe-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/dealing-with-rows-and-columns-in-pandas-dataframe-/</guid>
      <description>Dealing with Rows and Columns in Pandas DataFrame A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns. We can perform basic operations on rows/columns like selecting, deleting, adding, and renaming. In this article, we are using nba.csv file.
Dealing with Columns In order to deal with columns, we perform basic operations on columns like selecting, deleting, adding and renaming.</description>
    </item>
    
    <item>
      <title>Python | Pandas Extracting rows using .loc[] </title>
      <link>/python/python-pandas-extracting-rows-using-.loc-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-pandas-extracting-rows-using-.loc-/</guid>
      <description>Python | Pandas Extracting rows using .loc[] Python is a great language for doing data analysis, primarily because of the fantastic ecosystem of data-centric Python packages. Pandas is one of those packages and makes importing and analyzing data much easier.
Pandas provide a unique method to retrieve rows from a Data frame. DataFrame.loc[] method is a method that takes only index labels and returns row or dataframe if the index label exists in the caller data frame.</description>
    </item>
    
    <item>
      <title>Extracting rows using Pandas .iloc[] in Python </title>
      <link>/python/extracting-rows-using-pandas-.iloc-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/extracting-rows-using-pandas-.iloc-in-python-/</guid>
      <description>Extracting rows using Pandas .iloc[] in Python Python is a great language for doing data analysis, primarily because of the fantastic ecosystem of data-centric Python packages. Pandas is one of those packages that makes importing and analyzing data much easier. Extracting rows using Pandas .iloc[] The Pandas library provides a unique method to retrieve rows from a DataFrame. Dataframe.iloc[] method is used when the index label of a data frame is something other than numeric series of 0, 1, 2, 3&amp;hellip;.</description>
    </item>
    
    <item>
      <title>Indexing and Selecting Data with Pandas </title>
      <link>/python/indexing-and-selecting-data-with-pandas-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/indexing-and-selecting-data-with-pandas-/</guid>
      <description>Indexing and Selecting Data with Pandas Indexing in Pandas :Indexing in pandas means simply selecting particular rows and columns of data from a DataFrame. Indexing could mean selecting all the rows and some of the columns, some of the rows and all of the columns, or some of each of the rows and columns. Indexing can also be known as Subset Selection.
Let&amp;rsquo;s see some example of indexing in Pandas. In this article, we are using &amp;ldquo;nba.</description>
    </item>
    
    <item>
      <title>Boolean Indexing in Pandas </title>
      <link>/python/boolean-indexing-in-pandas-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/boolean-indexing-in-pandas-/</guid>
      <description>Boolean Indexing in Pandas In boolean indexing, we will select subsets of data based on the actual values of the data in the DataFrame and not on their row/column labels or integer locations. In boolean indexing, we use a boolean vector to filter the data. Boolean indexing is a type of indexing that uses actual values of the data in the DataFrame. In boolean indexing, we can filter a data in four ways:</description>
    </item>
    
    <item>
      <title>Pandas GroupBy </title>
      <link>/python/pandas-groupby-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/pandas-groupby-/</guid>
      <description>Pandas GroupBy Groupby is a pretty simple concept. We can create a grouping of categories and apply a function to the categories. It&amp;rsquo;s a simple concept but it&amp;rsquo;s an extremely valuable technique that&amp;rsquo;s widely used in data science. In real data science projects, you&amp;rsquo;ll be dealing with large amounts of data and trying things over and over, so for efficiency, we use Groupby concept. Groupby concept is really important because it&amp;rsquo;s ability to aggregate data efficiently, both in performance and the amount code is magnificent.</description>
    </item>
    
    <item>
      <title>Python | Pandas Merging, Joining, and Concatenating </title>
      <link>/python/python-pandas-merging-joining-and-concatenating-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-pandas-merging-joining-and-concatenating-/</guid>
      <description>Python | Pandas Merging, Joining, and Concatenating Pandas DataFrame is two-dimensional size-mutable, potentially heterogeneous tabular data structure with labelled axes (rows and columns). A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns. We can join, merge, and concat dataframe using different methods. In Dataframe df.merge(),df.join(), and df.concat() methods help in joining, merging and concating different dataframe.
Concatenating DataFrame In order to concat dataframe, we use concat() function which helps in concatenating a dataframe.</description>
    </item>
    
    <item>
      <title>Python | Working with date and time using Pandas </title>
      <link>/python/python-working-with-date-and-time-using-pandas-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-working-with-date-and-time-using-pandas-/</guid>
      <description>Python | Working with date and time using Pandas While working with data, encountering time series data is very usual. Pandas is a very useful tool while working with time series data. Pandas provide a different set of tools using which we can perform all the necessary tasks on date-time data. Let&amp;rsquo;s try to understand with the examples discussed below.
Code #1: Create a dates dataframe Python3 import pandas as pd # Create dates dataframe with frequency data = pd.</description>
    </item>
    
    <item>
      <title>Python | Pandas Working With Text Data </title>
      <link>/python/python-pandas-working-with-text-data-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-pandas-working-with-text-data-/</guid>
      <description>Python | Pandas Working With Text Data Series and Indexes are equipped with a set of string processing methods that make it easy to operate on each element of the array. Perhaps most importantly, these methods exclude missing/NA values automatically. These are accessed via the str attribute and generally, have names matching the equivalent (scalar) built-in string methods.
Lowercasing and Uppercasing a Data In order to lowercase a data, we use str.</description>
    </item>
    
    <item>
      <title>Read csv using pandas.read_csv() in Python </title>
      <link>/python/read-csv-using-pandas.read_csv-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/read-csv-using-pandas.read_csv-in-python-/</guid>
      <description>Read csv using pandas.read_csv() in Python To access data from the CSV file, we require a function read_csv() that retrieves data in the form of the data frame.
Syntax of read_csv() Here is the Pandas read CSV syntax with its parameter.
Syntax: pd.read_csv(filepath_or_buffer, sep=&amp;rsquo; ,&amp;rsquo; , header=&amp;lsquo;infer&amp;rsquo;, index_col=None, usecols=None, engine=None, skiprows=None, nrows=None) Parameters: filepath_or_buffer: It is the location of the file which is to be retrieved using this function. It accepts any string path or URL of the file.</description>
    </item>
    
    <item>
      <title>Python | Working with Pandas and XlsxWriter | Set -- 1 </title>
      <link>/python/python-working-with-pandas-and-xlsxwriter-set--1-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-working-with-pandas-and-xlsxwriter-set--1-/</guid>
      <description>Python | Working with Pandas and XlsxWriter | Set &amp;ndash; 1 Python Pandas is a data analysis library. It can read, filter and re-arrange small and large datasets and output them in a range of formats including Excel.
Pandas writes Excel files using the XlsxWriter modules.
XlsxWriter is a Python module for writing files in the XLSX file format. It can be used to write text, numbers, and formulas to multiple worksheets.</description>
    </item>
    
    <item>
      <title>Python JSON </title>
      <link>/python/python-json-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-json-/</guid>
      <description>Python JSON Python JSON JavaScript Object Notation is a format for structuring data. It is mainly used for storing and transferring data between the browser and the server. Python too supports JSON with a built-in package called JSON. This package provides all the necessary tools for working with JSON Objects including parsing, serializing, deserializing, and many more. JSON Example Let&amp;rsquo;s see a simple example where we convert the JSON objects to Python objects and vice versa.</description>
    </item>
    
    <item>
      <title>Working With JSON Data in Python </title>
      <link>/python/working-with-json-data-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/working-with-json-data-in-python-/</guid>
      <description>Working With JSON Data in Python JSON is JavaScript Object Notation. It means that a script (executable) file which is made of text in a programming language, is used to store and transfer the data. Python supports JSON through a built-in package called JSON. To use this feature, we import the JSON package in Python script. The text in JSON is done through quoted-string which contains the value in key-value mapping within { }.</description>
    </item>
    
    <item>
      <title>Read, Write and Parse JSON using Python </title>
      <link>/python/read-write-and-parse-json-using-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/read-write-and-parse-json-using-python-/</guid>
      <description>Read, Write and Parse JSON using Python JSON is a lightweight data format for data interchange which can be easily read and written by humans, easily parsed and generated by machines. It is a complete language-independent text format. To work with JSON data, Python has a built-in package called json. Example: s = &#39;{&amp;quot;id&amp;quot;:01, &amp;quot;name&amp;quot;: &amp;quot;Emily&amp;quot;, &amp;quot;language&amp;quot;: [&amp;quot;C++&amp;quot;, &amp;quot;Python&amp;quot;]}&#39; The syntax of JSON is considered as a subset of the syntax of JavaScript including the following:</description>
    </item>
    
    <item>
      <title>Append to JSON file using Python </title>
      <link>/python/append-to-json-file-using-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/append-to-json-file-using-python-/</guid>
      <description>Append to JSON file using Python The full form of JSON is JavaScript Object Notation. It means that a script (executable) file which is made of text in a programming language, is used to store and transfer the data. Python supports JSON through a built-in package called JSON. To use this feature, we import the JSON package in Python script. The text in JSON is done through quoted-string which contains the value in key-value mapping within { }.</description>
    </item>
    
    <item>
      <title>Serializing JSON data in Python </title>
      <link>/python/serializing-json-data-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/serializing-json-data-in-python-/</guid>
      <description>Serializing JSON data in Python Serialization is the process of encoding the from naive data type to JSON format. The Python module json converts a Python dictionary object into JSON object, and list and tuple are converted into JSON array, and int and float converted as JSON number, None converted as JSON null. Let&amp;rsquo;s take a look at how we serialize Python data to JSON format with these methods:
Dump().</description>
    </item>
    
    <item>
      <title>Deserialize JSON to Object in Python </title>
      <link>/python/deserialize-json-to-object-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/deserialize-json-to-object-in-python-/</guid>
      <description>Deserialize JSON to Object in Python Let us see how to deserialize a JSON document into a Python object. Deserialization is the process of decoding the data that is in JSON format into native data type. In Python, deserialization decodes JSON data into a dictionary(data type in python).We will be using these methods of the json module to perform this task : loads() : to deserialize a JSON document to a Python object.</description>
    </item>
    
    <item>
      <title>Working with csv files in Python </title>
      <link>/python/working-with-csv-files-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/working-with-csv-files-in-python-/</guid>
      <description>Working with csv files in Python This article explains how to load and parse a CSV file in Python.
What is a CSV? CSV (Comma Separated Values) is a simple file format used to store tabular data, such as a spreadsheet or database. A CSV file stores tabular data (numbers and text) in plain text. Each line of the file is a data record. Each record consists of one or more fields, separated by commas.</description>
    </item>
    
    <item>
      <title>Reading CSV files in Python </title>
      <link>/python/reading-csv-files-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/reading-csv-files-in-python-/</guid>
      <description>Reading CSV files in Python A CSV (Comma Separated Values) file is a form of plain text document which uses a particular format to organize tabular information. CSV file format is a bounded text document that uses a comma to distinguish the values. Every row in the document is a data log. Each log is composed of one or more fields, divided by commas. It is the most popular file format for importing and exporting spreadsheets and databases.</description>
    </item>
    
    <item>
      <title>Writing CSV files in Python </title>
      <link>/python/writing-csv-files-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/writing-csv-files-in-python-/</guid>
      <description>Writing CSV files in Python CSV (Comma Separated Values) is a simple file format used to store tabular data, such as a spreadsheet or database. CSV file stores tabular data (numbers and text) in plain text. Each line of the file is a data record. Each record consists of one or more fields, separated by commas. The use of the comma as a field separator is the source of the name for this file format.</description>
    </item>
    
    <item>
      <title>Python MySQL </title>
      <link>/python/python-mysql-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mysql-/</guid>
      <description>Python MySQL Python MySQL Connector is a Python driver that helps to integrate Python and MySQL. This Python MySQL library allows the conversion between Python and MySQL data types. MySQL Connector API is implemented using pure Python and does not require any third-party library. This Python MySQL tutorial will help to learn how to use MySQL with Python from basics to advance, including all necessary functions and queries explained in detail with the help of good Python MySQL examples.</description>
    </item>
    
    <item>
      <title>Connect MySQL database using MySQL-Connector Python </title>
      <link>/python/connect-mysql-database-using-mysql-connector-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/connect-mysql-database-using-mysql-connector-python-/</guid>
      <description>Connect MySQL database using MySQL-Connector Python While working with Python we need to work with databases, they may be of different types like MySQL, SQLite, NoSQL, etc. In this article, we will be looking forward to how to connect MySQL databases using MySQL Connector/Python.MySQL Connector module of Python is used to connect MySQL databases with the Python programs, it does that using the Python Database API Specification v2.0 (PEP 249). It uses the Python standard library and has no dependencies.</description>
    </item>
    
    <item>
      <title>Python MySQL -- Create Database </title>
      <link>/python/python-mysql--create-database-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mysql--create-database-/</guid>
      <description>Python MySQL &amp;ndash; Create Database Python Database API ( Application Program Interface ) is the Database interface for the standard Python. This standard is adhered to by most Python Database interfaces. There are various Database servers supported by Python Database such as MySQL, GadFly, mSQL, PostgreSQL, Microsoft SQL Server 2000, Informix, Interbase, Oracle, Sybase etc. To connect with MySQL database server from Python, we need to import the mysql.connector interface.Syntax: CREATE DATABASE DATABASE_NAME Example: Python # importing required libraries import mysql.</description>
    </item>
    
    <item>
      <title>Python: MySQL Create Table </title>
      <link>/python/python-mysql-create-table-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mysql-create-table-/</guid>
      <description>Python: MySQL Create Table MySQL is a Relational Database Management System (RDBMS) whereas the structured Query Language (SQL) is the language used for handling the RDBMS using commands i.e Creating, Inserting, Updating and Deleting the data from the databases. SQL commands are case insensitive i.e CREATE and create signify the same command.Installation Follow the below-mentioned process for installing the dependencies for python MySQL
Navigate to the python script directory using the command prompt.</description>
    </item>
    
    <item>
      <title>Python MySQL -- Insert into Table </title>
      <link>/python/python-mysql--insert-into-table-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mysql--insert-into-table-/</guid>
      <description>Python MySQL &amp;ndash; Insert into Table MySQL is a Relational Database Management System (RDBMS) whereas the structured Query Language (SQL) is the language used for handling the RDBMS using commands i.e Creating, Inserting, Updating and Deleting the data from the databases. SQL commands are case insensitive i.e CREATE and create signify the same command. Note: Before we insert data into our database, we need to create a table. In order to do so, refer to Python: MySQL Create Table.</description>
    </item>
    
    <item>
      <title>Python MySQL -- Select Query </title>
      <link>/python/python-mysql--select-query-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mysql--select-query-/</guid>
      <description>Python MySQL &amp;ndash; Select Query Python Database API ( Application Program Interface ) is the Database interface for the standard Python. This standard is adhered to by most Python Database interfaces. There are various Database servers supported by Python Database such as MySQL, GadFly, mySQL, PostgreSQL, Microsoft SQL Server 2000, Informix, Interbase, Oracle, Sybase etc. To connect with MySQL database server from Python, we need to import the mysql.connector module. Below is a program to connect with MySQL database Renewbuy.</description>
    </item>
    
    <item>
      <title>Python MySQL -- Where Clause </title>
      <link>/python/python-mysql--where-clause-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mysql--where-clause-/</guid>
      <description>Python MySQL &amp;ndash; Where Clause Where clause is used in MySQL database to filter the data as per the condition required. You can fetch, delete or update a particular set of data in MySQL database by using where clause.Syntax SELECT column1, column2, &amp;hellip;. columnN FROM [TABLE NAME] WHERE [CONDITION]; The above syntax is used for displaying a certain set of data following the condition.Example: Consider the following database named college and having a table name as a student.</description>
    </item>
    
    <item>
      <title>Python MySQL -- Order By Clause </title>
      <link>/python/python-mysql--order-by-clause-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mysql--order-by-clause-/</guid>
      <description>Python MySQL &amp;ndash; Order By Clause A connector is employed when we have to use MySQL with other programming languages. The work of MySQL-connector is to provide access to MySQL Driver to the required language. Thus, it generates a connection between the programming language and the MySQL Server.
OrderBy Clause OrderBy is used to arrange the result set in either ascending or descending order. By default, it is always in ascending order unless &amp;ldquo;DESC&amp;rdquo; is mentioned, which arranges it in descending order.</description>
    </item>
    
    <item>
      <title>Python MySQL -- Delete Query </title>
      <link>/python/python-mysql--delete-query-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mysql--delete-query-/</guid>
      <description>Python MySQL &amp;ndash; Delete Query Python Database API ( Application Program Interface ) is the Database interface for the standard Python. This standard is adhered to by most Python Database interfaces. There are various Database servers supported by Python Databases such as MySQL, GadFly, PostgreSQL, Microsoft SQL Server 2000, Informix, Interbase, Oracle, Sybase, etc. To connect with MySQL database server from Python, we need to import the mysql.connector interface. Below is a program to connect with MySQL database Renewbuy.</description>
    </item>
    
    <item>
      <title>Python MySQL -- Drop Table </title>
      <link>/python/python-mysql--drop-table-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mysql--drop-table-/</guid>
      <description>Python MySQL &amp;ndash; Drop Table A connector is employed when we have to use MySQL with other programming languages. The work of MySQL-connector is to provide access to MySQL Driver to the required language. Thus, it generates a connection between the programming language and the MySQL Server.
Drop Table Command Drop command affects the structure of the table and not data. It is used to delete an already existing table. For cases where you are not sure if the table to be dropped exists or not DROP TABLE IF EXISTS command is used.</description>
    </item>
    
    <item>
      <title>Python MySQL -- Update Query </title>
      <link>/python/python-mysql--update-query-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mysql--update-query-/</guid>
      <description>Python MySQL &amp;ndash; Update Query A connector is employed when we have to use MySQL with other programming languages. The work of MySQL-connector is to provide access to MySQL Driver to the required language. Thus, it generates a connection between the programming language and the MySQL Server.
Update Clause The update is used to change the existing values in a database. By using update a specific value can be corrected or updated.</description>
    </item>
    
    <item>
      <title>Python MySQL -- Limit Clause </title>
      <link>/python/python-mysql--limit-clause-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mysql--limit-clause-/</guid>
      <description>Python MySQL &amp;ndash; Limit Clause A connector is employed when we have to use MySQL with other programming languages. The work of mysql-connector is to provide access to MySQL Driver to the required language. Thus, it generates a connection between the programming language and MySQL Server.
Python-MySQL-Connector This is a MySQL Connector that allows Python to access MySQL Driver and implement SQL queries in its programming facility. Here we will try implementing Limit clause on our Database and will study the output generated.</description>
    </item>
    
    <item>
      <title>Python MySQL -- Join </title>
      <link>/python/python-mysql--join-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mysql--join-/</guid>
      <description>Python MySQL &amp;ndash; Join A connector is employed when we have to use mysql with other programming languages. The work of mysql-connector is to provide access to MySQL Driver to the required language. Thus, it generates a connection between the programming language and the MySQL Server.
Python-MySQL-Connector This is a MySQL Connector that allows Python to access MySQL Driver and implement SQL queries in its programming facility. Here we will try implementing Join clause on our Database and will study the output generated.</description>
    </item>
    
    <item>
      <title>Python MongoDB Tutorial </title>
      <link>/python/python-mongodb-tutorial-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mongodb-tutorial-/</guid>
      <description>Python MongoDB Tutorial MongoDB is one of the most popular NoSQL database. It is a cross-platform, object-oriented database. Basically NoSQL means MongoDB does not store data in the table or relational format rather provide a different mechanism for storage and retrieval of data. This is called BSON which is similar to JSON. That&amp;rsquo;s why MongoDB offers high speed, high availability, and high scalability.
This MongoDB tutorial will help you learn the interaction of MongoDB database with Python from Basics to Advance using a huge set of Python MongoDB programs and projects.</description>
    </item>
    
    <item>
      <title>Installing MongoDB on Windows with Python </title>
      <link>/python/installing-mongodb-on-windows-with-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/installing-mongodb-on-windows-with-python-/</guid>
      <description>Installing MongoDB on Windows with Python We would explain the installation of MongoDB in steps. Before you install, I would suggest everyone use ide spyder, Anaconda. Step 1 -&amp;gt; Install the community Edition Installation Link Step 2 -&amp;gt; Run the installed MongoDB windows installer package that you just downloaded. MongoDB get installed here-&amp;gt;
C:\Program Files\MongoDB\Server\3.4\ Step 3 -&amp;gt; Let&amp;rsquo;s set MongoDB environment
(a) Create data directory where all data is stored.</description>
    </item>
    
    <item>
      <title>MongoDB and Python </title>
      <link>/python/mongodb-and-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/mongodb-and-python-/</guid>
      <description>MongoDB and Python Prerequisite : MongoDB : An introductionMongoDB is a cross-platform, document-oriented database that works on the concept of collections and documents. MongoDB offers high speed, high availability, and high scalability.The next question which arises in the mind of the people is &amp;ldquo;Why MongoDB&amp;rdquo;?Reasons to opt for MongoDB :
It supports hierarchical data structure (Please refer docs for details)
It supports associate arrays like Dictionaries in Python.
Built-in Python drivers to connect python-application with Database.</description>
    </item>
    
    <item>
      <title>Create a database in MongoDB using Python </title>
      <link>/python/create-a-database-in-mongodb-using-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/create-a-database-in-mongodb-using-python-/</guid>
      <description>Create a database in MongoDB using Python MongoDB is a general-purpose, document-based, distributed database built for modern application developers and the cloud. It is a document database, which means it stores data in JSON-like documents. This is an efficient way to think about data and is more expressive and powerful than the traditional table model. MongoDB has no separate command to create a database. Instead, it uses the use command to create a database.</description>
    </item>
    
    <item>
      <title>Python MongoDB -- insert_one Query </title>
      <link>/python/python-mongodb--insert_one-query-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mongodb--insert_one-query-/</guid>
      <description>Python MongoDB &amp;ndash; insert_one Query MongoDB is a cross-platform document-oriented and a non relational (i.e NoSQL) database program. It is an open-source document database, that stores the data in the form of key-value pairs. MongoDB is developed by MongoDB Inc. and was initially released on 11 February 2009. It is written in C++, Go, JavaScript, and Python languages. MongoDB offers high speed, high availability, and high scalability.
insert_one() Method This is a method by which we can insert a single entry within the collection or the database in MongoDB.</description>
    </item>
    
    <item>
      <title>Python MongoDB -- insert_many Query </title>
      <link>/python/python-mongodb--insert_many-query-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mongodb--insert_many-query-/</guid>
      <description>Python MongoDB &amp;ndash; insert_many Query MongoDB is a cross-platform document-oriented and a non relational (i.e NoSQL) database program. It is an open-source document database, that stores the data in the form of key-value pairs. MongoDB is developed by MongoDB Inc. and was initially released on 11 February 2009. It is written in C++, Go, JavaScript, and Python languages. MongoDB offers high speed, high availability, and high scalability. insert_many() This method is used to insert multiple entries in a collection or the database in MongoDB.</description>
    </item>
    
    <item>
      <title>Python MongoDB -- Find </title>
      <link>/python/python-mongodb--find-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mongodb--find-/</guid>
      <description>Python MongoDB &amp;ndash; Find MongoDB is a cross-platform document-oriented database program and the most popular NoSQL database program. The term NoSQL means non-relational. MongoDB stores the data in the form of key-value pairs. It is an Open Source, Document Database which provides high performance and scalability along with data modeling and data management of huge sets of data in an enterprise application. MongoDB also provides the feature of Auto-Scaling. It uses JSON-like documents, which makes the database very flexible and scalable.</description>
    </item>
    
    <item>
      <title>Python MongoDB -- Query </title>
      <link>/python/python-mongodb--query-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mongodb--query-/</guid>
      <description>Python MongoDB &amp;ndash; Query MongoDB is a cross-platform document-oriented and a non relational (i.e NoSQL) database program. It is an open-source document database, that stores the data in the form of key-value pairs.
What is a MongoDB Query? MongoDB query is used to specify the selection filter using query operators while retrieving the data from the collection by db.find() method. We can easily filter the documents using the query object. To apply the filter on the collection, we can pass the query specifying the condition for the required documents as a parameter to this method, which is an optional parameter for db.</description>
    </item>
    
    <item>
      <title>Python MongoDB -- Sort </title>
      <link>/python/python-mongodb--sort-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mongodb--sort-/</guid>
      <description>Python MongoDB &amp;ndash; Sort MongoDB is a cross-platform document-oriented database program and the most popular NoSQL database program. The term NoSQL means non-relational. MongoDB stores the data in the form of key-value pairs. It is an Open Source, Document Database which provides high performance and scalability along with data modeling and data management of huge sets of data in an enterprise application. MongoDB also provides the feature of Auto-Scaling. It uses JSON-like documents, which makes the database very flexible and scalable.</description>
    </item>
    
    <item>
      <title>MongoDB python | Delete Data and Drop Collection </title>
      <link>/python/mongodb-python-delete-data-and-drop-collection-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/mongodb-python-delete-data-and-drop-collection-/</guid>
      <description>MongoDB python | Delete Data and Drop Collection Prerequisite : MongoDB Basics, Insert and Update
Aim : To delete entries/documents of a collection in a database. Assume name of collection &amp;lsquo;my_collection&amp;rsquo;.Method used : delete_one() or delete_many()
Remove All Documents That Match a Condition : The following operation removes all documents that match the specified condition. result = my_collection.delete_many({&amp;quot;name&amp;quot;: &amp;quot;Mr.Geek&amp;quot;})
result = my_collection.delete_many({&amp;quot;name&amp;quot;: &amp;quot;Mr.Geek&amp;quot;}) To see the number of documents deleted : print(result.</description>
    </item>
    
    <item>
      <title>Python Mongodb -- Delete_one() </title>
      <link>/python/python-mongodb--delete_one-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mongodb--delete_one-/</guid>
      <description>Python Mongodb &amp;ndash; Delete_one() Mongodb is a very popular cross-platform document-oriented, NoSQL(stands for &amp;ldquo;not only SQL&amp;rdquo;) database program, written in C++. It stores data in JSON format(as key-value pairs), which makes it easy to use. MongoDB can run over multiple servers, balancing the load to keep the system up and run in case of hardware failure.
Connecting to a Database Step 1 &amp;ndash; Establishing Connection: Port number Default: 27017 conn = MongoClient(‘localhost’, port-number) If using default port-number i.</description>
    </item>
    
    <item>
      <title>Python Mongodb -- Delete_many() </title>
      <link>/python/python-mongodb--delete_many-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mongodb--delete_many-/</guid>
      <description>Python Mongodb &amp;ndash; Delete_many() MongoDB is a general-purpose, document-based, distributed database built for modern application developers and the cloud. It is a document database, which means it stores data in JSON-like documents. This is an efficient way to think about data and is more expressive and powerful than the traditional table model.
Delete_many() Delete_many() is used when one needs to delete more than one document. A query object containing which document to be deleted is created and is passed as the first parameter to the delete_many().</description>
    </item>
    
    <item>
      <title>Python MongoDB -- Update_one() </title>
      <link>/python/python-mongodb--update_one-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mongodb--update_one-/</guid>
      <description>Python MongoDB &amp;ndash; Update_one() MongoDB is a cross-platform document-oriented and a non relational (i.e NoSQL) database program. It is an open-source document database, that stores the data in the form of key-value pairs.First create a database on which we perform the update_one() operation: Python3 # importing Mongoclient from pymongo from pymongo import MongoClient try: conn = MongoClient() # Making connection except: print(&amp;quot;Could not connect to MongoDB&amp;quot;) # database db = conn.</description>
    </item>
    
    <item>
      <title>Python MongoDB -- Update_many Query </title>
      <link>/python/python-mongodb--update_many-query-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mongodb--update_many-query-/</guid>
      <description>Python MongoDB &amp;ndash; Update_many Query MongoDB is a NoSQL database management system. Unlike MySQL the data in MongoDB is not stored as relations or tables. Data in mongoDB is stored as documents. Documents are Javascript/JSON like objects. More formally documents in MongoDB use BSON. PyMongo is a MongoDB API for python. It allows to read and write data from a MongoDB database using a python script. It needs both python and mongoDB to be installed on the system.</description>
    </item>
    
    <item>
      <title>Python MongoDB -- Limit Query </title>
      <link>/python/python-mongodb--limit-query-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mongodb--limit-query-/</guid>
      <description>Python MongoDB &amp;ndash; Limit Query MongoDB is one of the most used databases with its document stored as collections. These documents can be compared to JSON objects. PyMongo is the Python driver for mongoDB.
Limit() Method: The function limit() does what its name suggests- limiting the number of documents that will be returned. There is only one argument in the parameter which is a number signifying the number of documents that need to be returned.</description>
    </item>
    
    <item>
      <title>Python MongoDB -- create_index Query </title>
      <link>/python/python-mongodb--create_index-query-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mongodb--create_index-query-/</guid>
      <description>Python MongoDB &amp;ndash; create_index Query MongoDB is an open-source document-oriented database. MongoDB stores data in the form of key-value pairs and is a NoSQL database program. The term NoSQL means non-relational.
Indexing Indexing helps in querying the documents efficiently. It stores the value of a specific field or set of fields which are ordered by the value of the field as specified in the index. PyMongo contains a function create_index() to explicitly create index.</description>
    </item>
    
    <item>
      <title>Python MongoDB -- drop_index Query </title>
      <link>/python/python-mongodb--drop_index-query-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-mongodb--drop_index-query-/</guid>
      <description>Python MongoDB &amp;ndash; drop_index Query The drop_index() library function in PyMongo is used to drop the index from a collection in the database, as the name suggests. In this article, we are going to discuss how to remove an index from a collection using our python application with PyMongo.
Syntax: drop_index(index_or_name, session=None, **kwargs) Parameters:
index_or_name: The name of the index generated by calling create_index() or ensure_index() method on a collection. If a custom index name was created through the name parameter, then the custom name should be passed here.</description>
    </item>
    
    <item>
      <title>OpenCV Python Tutorial </title>
      <link>/python/opencv-python-tutorial-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/opencv-python-tutorial-/</guid>
      <description>OpenCV Python Tutorial OpenCV is a huge open-source library for computer vision, machine learning, and image processing. OpenCV supports a wide variety of programming languages like Python, C++, Java, etc. It can process images and videos to identify objects, faces, or even the handwriting of a human. When it is integrated with various libraries, such as Numpy which is a highly optimized library for numerical operations, then the number of weapons increases in your Arsenal i.</description>
    </item>
    
    <item>
      <title>Introduction to OpenCV </title>
      <link>/python/introduction-to-opencv-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/introduction-to-opencv-/</guid>
      <description>Introduction to OpenCV OpenCV is one of the most popular computer vision libraries. If you want to start your journey in the field of computer vision, then a thorough understanding of the concepts of OpenCV is of paramount importance.In this article, I will try to introduce the most basic and important concepts of OpenCV in an intuitive manner.This article will cover the following topics:
Reading an image
Extracting the RGB values of a pixel</description>
    </item>
    
    <item>
      <title>How to Install OpenCV for Python on Windows? </title>
      <link>/python/how-to-install-opencv-for-python-on-windows-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/how-to-install-opencv-for-python-on-windows-/</guid>
      <description>How to Install OpenCV for Python on Windows? Prerequisite: Python Language Introduction OpenCV is the huge open-source library for computer vision, machine learning, and image processing and now it plays a major role in real-time operation which is very important in today&amp;rsquo;s systems. By using it, one can process images and videos to identify objects, faces, or even the handwriting of a human. When it integrated with various libraries, such as Numpy, python is capable of processing the OpenCV array structure for analysis.</description>
    </item>
    
    <item>
      <title>Reading an image in OpenCV using Python </title>
      <link>/python/reading-an-image-in-opencv-using-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/reading-an-image-in-opencv-using-python-/</guid>
      <description>Reading an image in OpenCV using Python Prerequisite: Basics of OpenCV
In this article, we&amp;rsquo;ll try to open an image by using OpenCV (Open Source Computer Vision) library. Following types of files are supported in OpenCV library:
Windows bitmaps &amp;ndash; *.bmp, *.dib
JPEG files &amp;ndash; *.jpeg, *.jpg
Portable Network Graphics &amp;ndash; *.png WebP &amp;ndash; *.webp Sun rasters &amp;ndash; *.sr, *.ras TIFF files &amp;ndash; *.tiff, *.tif Raster and Vector geospatial data supported by GDAL To use the OpenCV library in python, we need to install these libraries as a prerequisite:</description>
    </item>
    
    <item>
      <title>OpenCV | Saving an Image </title>
      <link>/python/opencv-saving-an-image-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/opencv-saving-an-image-/</guid>
      <description>OpenCV | Saving an Image This article aims to learn how to save an image from one location to any other desired location on your system in CPP using OpenCv. Using OpenCV, we can generate a blank image with any colour one wishes to.
So, let us dig deep into it and understand the concept with the complete explanation.
Code : C++ code for saving an image to any location in OpenCV.</description>
    </item>
    
    <item>
      <title>Arithmetic Operations on Images using OpenCV | Set-1 (Addition and Subtraction) </title>
      <link>/python/arithmetic-operations-on-images-using-opencv-set-1-addition-and-subtraction-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/arithmetic-operations-on-images-using-opencv-set-1-addition-and-subtraction-/</guid>
      <description>Arithmetic Operations on Images using OpenCV | Set-1 (Addition and Subtraction) Arithmetic Operations like Addition, Subtraction, and Bitwise Operations(AND, OR, NOT, XOR) can be applied to the input images. These operations can be helpful in enhancing the properties of the input images. The Image arithmetics are important for analyzing the input image properties. The operated images can be further used as an enhanced input image, and many more operations can be applied for clarifying, thresholding, dilating etc of the image.</description>
    </item>
    
    <item>
      <title>Arithmetic Operations on Images using OpenCV | Set-2 (Bitwise Operations on Binary Images) </title>
      <link>/python/arithmetic-operations-on-images-using-opencv-set-2-bitwise-operations-on-binary-images-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/arithmetic-operations-on-images-using-opencv-set-2-bitwise-operations-on-binary-images-/</guid>
      <description>Arithmetic Operations on Images using OpenCV | Set-2 (Bitwise Operations on Binary Images) Prerequisite: Arithmetic Operations on Images | Set-1Bitwise operations are used in image manipulation and used for extracting essential parts in the image. In this article, Bitwise operations used are : AND
OR
XOR
NOT
Also, Bitwise operations helps in image masking. Image creation can be enabled with the help of these operations. These operations can be helpful in enhancing the properties of the input images.</description>
    </item>
    
    <item>
      <title>Image Resizing using OpenCV | Python </title>
      <link>/python/image-resizing-using-opencv-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/image-resizing-using-opencv-python-/</guid>
      <description>Image Resizing using OpenCV | Python Image resizing refers to the scaling of images. Scaling comes in handy in many image processing as well as machine learning applications. It helps in reducing the number of pixels from an image and that has several advantages e.g. It can reduce the time of training of a neural network as the more the number of pixels in an image more is the number of input nodes that in turn increases the complexity of the model.</description>
    </item>
    
    <item>
      <title>Image Processing in Python (Scaling, Rotating, Shifting and Edge Detection) </title>
      <link>/python/image-processing-in-python-scaling-rotating-shifting-and-edge-detection-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/image-processing-in-python-scaling-rotating-shifting-and-edge-detection-/</guid>
      <description>Image Processing in Python (Scaling, Rotating, Shifting and Edge Detection) Taking pictures is just a matter of click so why playing around with it should be more than few lines of code. Seems not a case with python. There are quite a few good libraries available in python to process images such as open-cv, Pillow etc. In this article we&amp;rsquo;ll be using Open CV, an open source library for computer vision.</description>
    </item>
    
    <item>
      <title>Python | Image blurring using OpenCV </title>
      <link>/python/python-image-blurring-using-opencv-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-image-blurring-using-opencv-/</guid>
      <description>Python | Image blurring using OpenCV Image Blurring refers to making the image less clear or distinct. It is done with the help of various low pass filter kernels.
Advantages of blurring:
It helps in Noise removal. As noise is considered as high pass signal so by the application of low pass filter kernel we restrict noise.
It helps in smoothing the image.
Low intensity edges are removed.
It helps in hiding the details when necessary.</description>
    </item>
    
    <item>
      <title>Erosion and Dilation of images using OpenCV in python </title>
      <link>/python/erosion-and-dilation-of-images-using-opencv-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/erosion-and-dilation-of-images-using-opencv-in-python-/</guid>
      <description>Erosion and Dilation of images using OpenCV in python Morphological operations are a set of operations that process images based on shapes. They apply a structuring element to an input image and generate an output image. The most basic morphological operations are two: Erosion and Dilation Basics of Erosion: Erodes away the boundaries of the foreground object
Used to diminish the features of an image.
Working of erosion: A kernel(a matrix of odd size(3,5,7) is convolved with the image.</description>
    </item>
    
    <item>
      <title>Python | Thresholding techniques using OpenCV | Set-1 (Simple Thresholding) </title>
      <link>/python/python-thresholding-techniques-using-opencv-set-1-simple-thresholding-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-thresholding-techniques-using-opencv-set-1-simple-thresholding-/</guid>
      <description>Python | Thresholding techniques using OpenCV | Set-1 (Simple Thresholding) Thresholding is a technique in OpenCV, which is the assignment of pixel values in relation to the threshold value provided. In thresholding, each pixel value is compared with the threshold value. If the pixel value is smaller than the threshold, it is set to 0, otherwise, it is set to a maximum value (generally 255). Thresholding is a very popular segmentation technique, used for separating an object considered as a foreground from its background.</description>
    </item>
    
    <item>
      <title>Python | Thresholding techniques using OpenCV | Set-2 (Adaptive Thresholding) </title>
      <link>/python/python-thresholding-techniques-using-opencv-set-2-adaptive-thresholding-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-thresholding-techniques-using-opencv-set-2-adaptive-thresholding-/</guid>
      <description>Python | Thresholding techniques using OpenCV | Set-2 (Adaptive Thresholding) Prerequisite: Simple Thresholding using OpenCV
In the previous post, Simple Thresholding was explained with different types of thresholding techniques. Another Thresholding technique is Adaptive Thresholding. In Simple Thresholding, a global value of threshold was used which remained constant throughout. So, a constant threshold value won&amp;rsquo;t help in the case of variable lighting conditions in different areas. Adaptive thresholding is the method where the threshold value is calculated for smaller regions.</description>
    </item>
    
    <item>
      <title>Python | Thresholding techniques using OpenCV | Set-3 (Otsu Thresholding) </title>
      <link>/python/python-thresholding-techniques-using-opencv-set-3-otsu-thresholding-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-thresholding-techniques-using-opencv-set-3-otsu-thresholding-/</guid>
      <description>Python | Thresholding techniques using OpenCV | Set-3 (Otsu Thresholding) In the previous posts, Simple Thresholding and Adaptive Thresholding were explained. In Simple Thresholding, the global value of threshold was used which remained constant throughout. In Adaptive thresholding, the threshold value is calculated for smaller regions with different threshold values for different regions with respect to the change in lighting.
In Otsu Thresholding, a value of the threshold isn&amp;rsquo;t chosen but is determined automatically.</description>
    </item>
    
    <item>
      <title>Filter Color with OpenCV </title>
      <link>/python/filter-color-with-opencv-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/filter-color-with-opencv-/</guid>
      <description>Filter Color with OpenCV Colour segmentation or color filtering is widely used in OpenCV for identifying specific objects/regions having a specific color. The most widely used color space is RGB color space, it is called an additive color space as the three color shades add up to give color to the image. To identify a region of a specific color, put the threshold and create a mask to separate the different colors.</description>
    </item>
    
    <item>
      <title>Python | Bilateral Filtering </title>
      <link>/python/python-bilateral-filtering-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-bilateral-filtering-/</guid>
      <description>Python | Bilateral Filtering A bilateral filter is used for smoothening images and reducing noise, while preserving edges. This article explains an approach using the averaging filter, while this article provides one using a median filter. However, these convolutions often result in a loss of important edge information, since they blur out everything, irrespective of it being noise or an edge. To counter this problem, the non-linear bilateral filter was introduced.</description>
    </item>
    
    <item>
      <title>Python | Background subtraction using OpenCV </title>
      <link>/python/python-background-subtraction-using-opencv-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-background-subtraction-using-opencv-/</guid>
      <description>Python | Background subtraction using OpenCV Background Subtraction has several use cases in everyday life, It is being used for object segmentation, security enhancement, pedestrian tracking, counting the number of visitors, number of vehicles in traffic etc. It is able to learn and identify the foreground mask.As the name suggests, it is able to subtract or eliminate the background portion in an image. Its output is a binary segmented image which essentially gives information about the non-stationary objects in the image.</description>
    </item>
    
    <item>
      <title>Python | Play a video using OpenCV </title>
      <link>/python/python-play-a-video-using-opencv-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-play-a-video-using-opencv-/</guid>
      <description>Python | Play a video using OpenCV OpenCV (Open Source Computer Vision) is a computer vision library that contains various functions to perform operations on Images or videos. OpenCV library can be used to perform multiple operations on videos. Let&amp;rsquo;s see how to play a video using the OpenCV Python. To capture a video, we need to create a VideoCapture object. VideoCapture have the device index or the name of a video file.</description>
    </item>
    
    <item>
      <title>Extract images from video in Python </title>
      <link>/python/extract-images-from-video-in-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/extract-images-from-video-in-python-/</guid>
      <description>Extract images from video in Python OpenCV comes with many powerful video editing functions. In current scenario, techniques such as image scanning, face recognition can be accomplished using OpenCV.
Image Analysis is a very common field in the area of Computer Vision. It is the extraction of meaningful information from videos or images. OpenCv library can be used to perform multiple operations on videos.
Modules Needed:
import cv2 import os Function Used :</description>
    </item>
    
    <item>
      <title>Face Detection using Python and OpenCV with webcam </title>
      <link>/python/face-detection-using-python-and-opencv-with-webcam-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/face-detection-using-python-and-opencv-with-webcam-/</guid>
      <description>Face Detection using Python and OpenCV with webcam OpenCV is a Library which is used to carry out image processing using programming languages like python. This project utilizes OpenCV Library to make a Real-Time Face Detection using your webcam as a primary camera.Following are the requirements for it:- Python 2.7
OpenCV
Numpy
Haar Cascade Frontal face classifiers
Approach/Algorithms used: This project uses LBPH (Local Binary Patterns Histograms) Algorithm to detect faces.</description>
    </item>
    
    <item>
      <title>Selenium Python Tutorial </title>
      <link>/python/selenium-python-tutorial-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/selenium-python-tutorial-/</guid>
      <description>Selenium Python Tutorial Selenium is a powerful tool for controlling web browsers through programs and performing browser automation. It is functional for all browsers, works on all major OS and its scripts are written in various languages i.e Python, Java, C#, etc, we will be working with Python. Selenium Tutorial covers all topics such as &amp;ndash; WebDriver, WebElement, Unit Testing with selenium. This Python Selenium Tutorial covers Selenium from basics to advanced and professional uses.</description>
    </item>
    
    <item>
      <title>Selenium Basics -- Components, Features, Uses and Limitations </title>
      <link>/python/selenium-basics--components-features-uses-and-limitations-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/selenium-basics--components-features-uses-and-limitations-/</guid>
      <description>Selenium Basics &amp;ndash; Components, Features, Uses and Limitations Selenium is a powerful tool for controlling web browser through program. It is functional for all browsers, works on all major OS and its scripts are written in various languages i.e Python, Java, C#, etc, we will be working with Python. Selenium has four major components &amp;ndash; Selenium IDE, Selenium RC, Selenium Web driver, Selenium GRID.
Selenium Basics Components
Features
Applications
Limitations</description>
    </item>
    
    <item>
      <title>Components of Selenium </title>
      <link>/python/components-of-selenium-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/components-of-selenium-/</guid>
      <description>Components of Selenium Selenium is a powerful tool for controlling web browser through program. It is functional for all browsers, works on all major OS and its scripts are written in various languages i.e Python, Java, C#, etc, we will be working with Python. Selenium has four major components &amp;ndash; Selenium IDE, Selenium RC, Selenium Web driver, Selenium GRID.
Components of Selenium Selenium has been in the industry for a long time and used by automation testers all around the globe.</description>
    </item>
    
    <item>
      <title>Selenium Python Introduction and Installation </title>
      <link>/python/selenium-python-introduction-and-installation-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/selenium-python-introduction-and-installation-/</guid>
      <description>Selenium Python Introduction and Installation Selenium&amp;rsquo;s Python Module is built to perform automated testing with Python. Selenium Python bindings provides a simple API to write functional/acceptance tests using Selenium WebDriver. Through Selenium Python API you can access all functionalities of Selenium WebDriver in an intuitive way. To check more details about Selenium visit &amp;ndash; Selenium Basics &amp;ndash; Components, Features, Uses and Limitations. Selenium Python Introduction Selenium Python bindings provide a convenient API to access Selenium WebDrivers like Firefox, Ie, Chrome, Remote etc.</description>
    </item>
    
    <item>
      <title>Navigating links using get method -- Selenium Python </title>
      <link>/python/navigating-links-using-get-method--selenium-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/navigating-links-using-get-method--selenium-python-/</guid>
      <description>Navigating links using get method &amp;ndash; Selenium Python Selenium&amp;rsquo;s Python Module is built to perform automated testing with Python. Selenium Python bindings provides a simple API to write functional/acceptance tests using Selenium WebDriver. Through Selenium Python API you can access all functionalities of Selenium WebDriver in an intuitive way. This article illustrates about how to use Selenium Python to navigate to any link on web using get method of Selenium Webdriver in python.</description>
    </item>
    
    <item>
      <title>Interacting with Webpage -- Selenium Python </title>
      <link>/python/interacting-with-webpage--selenium-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/interacting-with-webpage--selenium-python-/</guid>
      <description>Interacting with Webpage &amp;ndash; Selenium Python Selenium&amp;rsquo;s Python Module is built to perform automated testing with Python. Selenium Python bindings provide a simple API to write functional/acceptance tests using Selenium WebDriver. To open a webpage using Selenium Python, checkout &amp;ndash; Navigating links using get method &amp;ndash; Selenium Python. Just being able to go to places isn&amp;rsquo;t terribly useful. What we&amp;rsquo;d really like to do is to interact with the pages, or, more specifically, the HTML elements within a page.</description>
    </item>
    
    <item>
      <title>Locating single elements in Selenium Python </title>
      <link>/python/locating-single-elements-in-selenium-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/locating-single-elements-in-selenium-python-/</guid>
      <description>Locating single elements in Selenium Python Locators Strategies in Selenium Python are methods that are used to locate elements from the page and perform an operation on the same. Selenium&amp;rsquo;s Python Module is built to perform automated testing with Python. Selenium Python bindings provide a simple API to write functional/acceptance tests using Selenium WebDriver. After one has installed selenium and checked out &amp;ndash; Navigating links using get method, one might want to play more with Selenium Python.</description>
    </item>
    
    <item>
      <title>Locating multiple elements in Selenium Python </title>
      <link>/python/locating-multiple-elements-in-selenium-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/locating-multiple-elements-in-selenium-python-/</guid>
      <description>Locating multiple elements in Selenium Python Locators Strategies in Selenium Python are methods that are used to locate single or multiple elements from the page and perform operations on the same. Selenium&amp;rsquo;s Python Module is built to perform automated testing with Python. Selenium Python bindings provide a simple API to write functional/acceptance tests using Selenium WebDriver. After one has installed selenium and checked out &amp;ndash; Navigating links using get method, one might want to play more with Selenium Python.</description>
    </item>
    
    <item>
      <title>Locator Strategies -- Selenium Python </title>
      <link>/python/locator-strategies--selenium-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/locator-strategies--selenium-python-/</guid>
      <description>Locator Strategies &amp;ndash; Selenium Python Locators Strategies in Selenium Python are methods that are used to locate elements from the page and perform an operation on the same. Selenium&amp;rsquo;s Python Module is built to perform automated testing with Python. Selenium Python bindings provides a simple API to write functional/acceptance tests using Selenium WebDriver. After one has installed selenium and checked out &amp;ndash; Navigating links using get method, one might want to play more with Selenium Python.</description>
    </item>
    
    <item>
      <title>Action Chains in Selenium Python </title>
      <link>/python/action-chains-in-selenium-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/action-chains-in-selenium-python-/</guid>
      <description>Action Chains in Selenium Python Selenium&amp;rsquo;s Python Module is built to perform automated testing with Python. ActionChains are a way to automate low-level interactions such as mouse movements, mouse button actions, keypress, and context menu interactions. This is useful for doing more complex actions like hover over and drag and drop. Action chain methods are used by advanced scripts where we need to drag an element, click an element, This article revolves around how to manipulate DOM using Action Chains in Selenium.</description>
    </item>
    
    <item>
      <title>Exceptions -- Selenium Python </title>
      <link>/python/exceptions--selenium-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/exceptions--selenium-python-/</guid>
      <description>Exceptions &amp;ndash; Selenium Python Exceptions in Selenium Python are the errors that occur when one of method fails or an unexpected event occurs. All instances in Python must be instances of a class that derives from BaseException. Two exception classes that are not related via subclassing are never equivalent, even if they have the same name. The built-in exceptions can be generated by the interpreter or built-in functions. This article revolves around multiple exceptions that can occur during the run of a Selenium program.</description>
    </item>
    
    <item>
      <title>Python Tkinter Tutorial </title>
      <link>/python/python-tkinter-tutorial-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tkinter-tutorial-/</guid>
      <description>Python Tkinter Tutorial Tkinter is the most commonly used library for developing GUI (Graphical User Interface) in Python. It is a standard Python interface to the Tk GUI toolkit shipped with Python. As Tk and Tkinter are available on most of the Unix platforms as well as on the Windows system, developing GUI applications with Tkinter becomes the fastest and easiest.
This Tkinter Tutorial will help learning Tkinter from Basics to advance GUI development, including all the necessary functions explained in detail.</description>
    </item>
    
    <item>
      <title>Introduction to Tkinter </title>
      <link>/python/introduction-to-tkinter-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/introduction-to-tkinter-/</guid>
      <description>Introduction to Tkinter Graphical User Interface(GUI) is a form of user interface which allows users to interact with computers through visual indicators using items such as icons, menus, windows, etc. It has advantages over the Command Line Interface(CLI) where users interact with computers by writing commands using keyboard only and whose usage is more difficult than GUI. What is Tkinter? Tkinter is the inbuilt python module that is used to create GUI applications.</description>
    </item>
    
    <item>
      <title>What are Widgets in Tkinter? </title>
      <link>/python/what-are-widgets-in-tkinter-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/what-are-widgets-in-tkinter-/</guid>
      <description>What are Widgets in Tkinter? Tkinter is Python&amp;rsquo;s standard GUI (Graphical User Interface) package. tkinter provides us with a variety of common GUI elements which we can use to build out interface &amp;ndash; such as buttons, menus and various kind of entry fields and display areas. We call these elements Widgets.
Widgets In general, Widget is an element of Graphical User Interface (GUI) that displays/illustrates information or gives a way for the user to interact with the OS.</description>
    </item>
    
    <item>
      <title>Python | Creating a button in tkinter </title>
      <link>/python/python-creating-a-button-in-tkinter-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-creating-a-button-in-tkinter-/</guid>
      <description>Python | Creating a button in tkinter Tkinter is Python&amp;rsquo;s standard GUI (Graphical User Interface) package. It is one of the most commonly used packages for GUI applications which comes with Python itself. Let&amp;rsquo;s see how to create a button using Tkinter. Follow the below steps: Import tkinter module # Tkinter in Python 2.x. (Note Capital T)
Create main window (root = Tk())
Add as many widgets as you want. Importing tkinter module is same as importing any other module.</description>
    </item>
    
    <item>
      <title>Python Tkinter -- Label </title>
      <link>/python/python-tkinter--label-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tkinter--label-/</guid>
      <description>Python Tkinter &amp;ndash; Label Python offers multiple options for developing a GUI (Graphical User Interface). Out of all the GUI methods, Tkinter is the most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with Tkinter is the fastest and easiest way to create GUI applications. Creating a GUI using Tkinter is an easy task using widgets. Widgets are standard graphical user interfaces (GUI) elements, like buttons and menus.</description>
    </item>
    
    <item>
      <title>RadioButton in Tkinter | Python </title>
      <link>/python/radiobutton-in-tkinter-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/radiobutton-in-tkinter-python-/</guid>
      <description>RadioButton in Tkinter | Python The Radiobutton is a standard Tkinter widget used to implement one-of-many selections. Radiobuttons can contain text or images, and you can associate a Python function or method with each button. When the button is pressed, Tkinter automatically calls that function or method.Syntax: button = Radiobutton(master, text=&amp;ldquo;Name on Button&amp;rdquo;, variable = &amp;ldquo;shared variable&amp;rdquo;, value = &amp;ldquo;values of each button&amp;rdquo;, options = values, &amp;hellip;)shared variable = A Tkinter variable shared among all Radio buttons value = each radiobutton should have different value otherwise more than 1 radiobutton will get selected.</description>
    </item>
    
    <item>
      <title>Python Tkinter -- Checkbutton Widget </title>
      <link>/python/python-tkinter--checkbutton-widget-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tkinter--checkbutton-widget-/</guid>
      <description>Python Tkinter &amp;ndash; Checkbutton Widget Python offers multiple options for developing a GUI (Graphical User Interface). Out of all the GUI methods, Tkinter is the most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with Tkinter is the fastest and easiest way to create GUI applications. Creating a GUI using Tkinter is an easy task.
Note: For more information, refer to Python GUI &amp;ndash; tkinter</description>
    </item>
    
    <item>
      <title>Python Tkinter -- Canvas Widget </title>
      <link>/python/python-tkinter--canvas-widget-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tkinter--canvas-widget-/</guid>
      <description>Python Tkinter &amp;ndash; Canvas Widget Tkinter is a GUI toolkit used in python to make user-friendly GUIs.Tkinter is the most commonly used and the most basic GUI framework available in python. Tkinter uses an object-oriented approach to make GUIs.Note: For more information, refer to Python GUI &amp;ndash; tkinter
Canvas widget The Canvas widget lets us display various graphics on the application. It can be used to draw simple shapes to complicated graphs.</description>
    </item>
    
    <item>
      <title>Combobox Widget in tkinter | Python </title>
      <link>/python/combobox-widget-in-tkinter-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/combobox-widget-in-tkinter-python-/</guid>
      <description>Combobox Widget in tkinter | Python Python provides a variety of GUI (Graphic User Interface) types such as PyQT, Tkinter, Kivy, WxPython, and PySide. Among them, tkinter is the most commonly used GUI module in Python since it is simple and easy to understand. The word Tkinter comes from the Tk interface. The tkinter module is available in Python standard library which has to be imported while writing a program in Python to generate a GUI.</description>
    </item>
    
    <item>
      <title>Python Tkinter -- Entry Widget </title>
      <link>/python/python-tkinter--entry-widget-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tkinter--entry-widget-/</guid>
      <description>Python Tkinter &amp;ndash; Entry Widget Python offers multiple options for developing a GUI (Graphical User Interface). Out of all the GUI methods, Tkinter is the most commonly used method. Python with Tkinter is the fastest and easiest way to create GUI applications. Creating a GUI using Tkinter is an easy task.In Python3 Tkinter is come preinstalled But you can also install it by using the command: pip install tkinter Example: Now let&amp;rsquo;s create a simple window using Tkinter Python3 # creating a simple tkinter window # if you are using python2 # use import Tkinter as tk import tkinter as tk root = tk.</description>
    </item>
    
    <item>
      <title>Python Tkinter -- Text Widget </title>
      <link>/python/python-tkinter--text-widget-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tkinter--text-widget-/</guid>
      <description>Python Tkinter &amp;ndash; Text Widget Tkinter is a GUI toolkit used in python to make user-friendly GUIs.Tkinter is the most commonly used and the most basic GUI framework available in python. Tkinter uses an object-oriented approach to make GUIs.Note: For more information, refer to Python GUI &amp;ndash; tkinter Text Widget Text Widget is used where a user wants to insert multiline text fields. This widget can be used for a variety of applications where the multiline text is required such as messaging, sending information or displaying information and many other tasks.</description>
    </item>
    
    <item>
      <title>Python Tkinter -- Message </title>
      <link>/python/python-tkinter--message-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tkinter--message-/</guid>
      <description>Python Tkinter &amp;ndash; Message Python offers multiple options for developing a GUI (Graphical User Interface). Out of all the GUI methods, Tkinter is the most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with Tkinter is the fastest and easiest way to create GUI applications. Creating a GUI using Tkinter is an easy task.
Note: For more information, refer to Python GUI &amp;ndash; tkinter</description>
    </item>
    
    <item>
      <title>Python | Menu widget in Tkinter </title>
      <link>/python/python-menu-widget-in-tkinter-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-menu-widget-in-tkinter-/</guid>
      <description>Python | Menu widget in Tkinter Tkinter is Python&amp;rsquo;s standard GUI (Graphical User Interface) package. It is one of the most commonly used package for GUI applications which comes with the Python itself.
Menus are the important part of any GUI. A common use of menus is to provide convenient access to various operations such as saving or opening a file, quitting a program, or manipulating data. Toplevel menus are displayed just under the title bar of the root or any other toplevel windows.</description>
    </item>
    
    <item>
      <title>Python Tkinter -- SpinBox </title>
      <link>/python/python-tkinter--spinbox-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tkinter--spinbox-/</guid>
      <description>Python Tkinter &amp;ndash; SpinBox Python offers multiple options for developing GUI (Graphical User Interface). Out of all the GUI methods, tkinter is the most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with tkinter is the fastest and easiest way to create the GUI applications. Creating a GUI using tkinter is an easy task.
Note: For more information, refer to Python GUI &amp;ndash; tkinter</description>
    </item>
    
    <item>
      <title>Progressbar widget in Tkinter | Python </title>
      <link>/python/progressbar-widget-in-tkinter-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/progressbar-widget-in-tkinter-python-/</guid>
      <description>Progressbar widget in Tkinter | Python The purpose of this widget is to reassure the user that something is happening. It can operate in one of two modes &amp;ndash;In determinate mode, the widget shows an indicator that moves from beginning to end under program control.In indeterminate mode, the widget is animated so the user will believe that something is in progress. In this mode, the indicator bounces back and forth between the ends of the widget.</description>
    </item>
    
    <item>
      <title>Python-Tkinter Scrollbar </title>
      <link>/python/python-tkinter-scrollbar-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tkinter-scrollbar-/</guid>
      <description>Python-Tkinter Scrollbar Python offers multiple options for developing a GUI (Graphical User Interface). Out of all the GUI methods, Tkinter is the most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with Tkinter is the fastest and easiest way to create GUI applications. Creating a GUI using Tkinter is an easy task.
Note: For more information, refer to Python GUI &amp;ndash; tkinter</description>
    </item>
    
    <item>
      <title>Python Tkinter -- ScrolledText Widget </title>
      <link>/python/python-tkinter--scrolledtext-widget-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tkinter--scrolledtext-widget-/</guid>
      <description>Python Tkinter &amp;ndash; ScrolledText Widget Tkinter is a built-in standard python library. With the help of Tkinter, many GUI applications can be created easily. There are various types of widgets available in Tkinter such as button, frame, label, menu, scrolledtext, canvas and many more. A widget is an element that provides various controls. ScrolledText widget is a text widget with a scroll bar. The tkinter.scrolledtext module provides the text widget along with a scroll bar.</description>
    </item>
    
    <item>
      <title>Python Tkinter -- ListBox Widget </title>
      <link>/python/python-tkinter--listbox-widget-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tkinter--listbox-widget-/</guid>
      <description>Python Tkinter &amp;ndash; ListBox Widget Tkinter is a GUI toolkit used in python to make user-friendly GUIs.Tkinter is the most commonly used and the most basic GUI framework available in python. Tkinter uses an object-oriented approach to make GUIs. Note: For more information, refer to Python GUI &amp;ndash; tkinter
ListBox widget The ListBox widget is used to display different types of items. These items must be of the same type of font and having the same font color.</description>
    </item>
    
    <item>
      <title>Python Tkinter -- Frame Widget </title>
      <link>/python/python-tkinter--frame-widget-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tkinter--frame-widget-/</guid>
      <description>Python Tkinter &amp;ndash; Frame Widget Python offers multiple options for developing GUI (Graphical User Interface). Out of all the GUI methods, tkinter is the most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with tkinter is the fastest and easiest way to create the GUI applications. Creating a GUI using tkinter is an easy task.
Note: For more information, refer to Python GUI &amp;ndash; tkinter</description>
    </item>
    
    <item>
      <title>Python Tkinter -- Scale Widget </title>
      <link>/python/python-tkinter--scale-widget-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tkinter--scale-widget-/</guid>
      <description>Python Tkinter &amp;ndash; Scale Widget Tkinter is a GUI toolkit used in python to make user-friendly GUIs.Tkinter is the most commonly used and the most basic GUI framework available in python. Tkinter uses an object-oriented approach to make GUIs.
Note: For more information, refer to Python GUI &amp;ndash; tkinter
Scale widget The Scale widget is used whenever we want to select a specific value from a range of values. It provides a sliding bar through which we can select the values by sliding from left to right or top to bottom depending upon the orientation of our sliding bar.</description>
    </item>
    
    <item>
      <title>Hierarchical treeview in Python GUI application </title>
      <link>/python/hierarchical-treeview-in-python-gui-application-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/hierarchical-treeview-in-python-gui-application-/</guid>
      <description>Hierarchical treeview in Python GUI application Python uses different GUI applications that are helpful for the users while interacting with the applications they are using. There are basically three GUI(s) that python uses namely Tkinter, wxPython, and PyQt. All of these can operate with windows, Linux, and mac-OS. However, these GUI applications have many widgets i.e, controls that are helpful for the user interaction with the application. Some of the widgets are buttons, list boxes, scrollbar, treeview, etc.</description>
    </item>
    
    <item>
      <title>Python-Tkinter Treeview scrollbar </title>
      <link>/python/python-tkinter-treeview-scrollbar-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tkinter-treeview-scrollbar-/</guid>
      <description>Python-Tkinter Treeview scrollbar Python has several options for constructing GUI and python tkinter is one of them. It is the standard GUI library for Python, which helps in making GUI applications easily. It provides an efficient object-oriented interface to the tk GUI toolkit. It also has multiple controls called widgets like text boxes, scrollbars, buttons, etc. Moreover, Tkinter has some geometry management methods namely, pack(), grid(), and, place() which are helpful in organizing widgets.</description>
    </item>
    
    <item>
      <title>Python Tkinter -- Toplevel Widget </title>
      <link>/python/python-tkinter--toplevel-widget-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tkinter--toplevel-widget-/</guid>
      <description>Python Tkinter &amp;ndash; Toplevel Widget Tkinter is a GUI toolkit used in python to make user-friendly GUIs.Tkinter is the most commonly used and the most basic GUI framework available in Python. Tkinter uses an object-oriented approach to make GUIs.
Note: For more information, refer to Python GUI &amp;ndash; tkinter
Toplevel widget A Toplevel widget is used to create a window on top of all other windows. The Toplevel widget is used to provide some extra information to the user and also when our program deals with more than one application.</description>
    </item>
    
    <item>
      <title>Python | askopenfile() function in Tkinter </title>
      <link>/python/python-askopenfile-function-in-tkinter-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-askopenfile-function-in-tkinter-/</guid>
      <description>Python | askopenfile() function in Tkinter While working with GUI one may need to open files and read data from it or may require to write data in that particular file. One can achieve this with the help of open() function (python built-in) but one may not be able to select any required file unless provides a path to that particular file in code. With the help of GUI, you may not require to specify the path of any file but you can directly open a file and read it&amp;rsquo;s content.</description>
    </item>
    
    <item>
      <title>Python | asksaveasfile() function in Tkinter </title>
      <link>/python/python-asksaveasfile-function-in-tkinter-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-asksaveasfile-function-in-tkinter-/</guid>
      <description>Python | asksaveasfile() function in Tkinter Python provides a variety of modules with the help of which one may develop GUI (Graphical User Interface) applications. Tkinter is one of the easiest and fastest way to develop GUI applications.
While working with files one may need to open files, do operations on files and after that to save file. asksaveasfile() is the function which is used to save user&amp;rsquo;s file (extension can be set explicitly or you can set default extensions also).</description>
    </item>
    
    <item>
      <title>Python -- Tkinter askquestion Dialog </title>
      <link>/python/python--tkinter-askquestion-dialog-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python--tkinter-askquestion-dialog-/</guid>
      <description>Python &amp;ndash; Tkinter askquestion Dialog In Python, There Are Several Libraries for Graphical User Interface. Tkinter is one of them that is most useful. It is a standard interface. Tkinter is easy to use and provides several functions for building efficient applications. In Every Application, we need some Message to Display like &amp;ldquo;Do You Want To Close &amp;quot; or showing any warning or Something information. For this Tkinter provide a library like messagebox.</description>
    </item>
    
    <item>
      <title>Python Tkinter -- MessageBox Widget </title>
      <link>/python/python-tkinter--messagebox-widget-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tkinter--messagebox-widget-/</guid>
      <description>Python Tkinter &amp;ndash; MessageBox Widget Python offers multiple options for developing GUI (Graphical User Interface). Out of all the GUI methods, tkinter is the most commonly used method. It is a standard Python interface to the Tk GUI toolkit shipped with Python. Python with tkinter is the fastest and easiest way to create the GUI applications. Creating a GUI using tkinter is an easy task.
Note: For more information, refer to Python GUI &amp;ndash; tkinter</description>
    </item>
    
    <item>
      <title>Python | place() method in Tkinter </title>
      <link>/python/python-place-method-in-tkinter-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-place-method-in-tkinter-/</guid>
      <description>Python | place() method in Tkinter The Place geometry manager is the simplest of the three general geometry managers provided in Tkinter. It allows you explicitly set the position and size of a window, either in absolute terms, or relative to another window. You can access the place manager through the place() method which is available for all standard widgets. It is usually not a good idea to use place() for ordinary window and dialog layouts; its simply too much work to get things working as they should.</description>
    </item>
    
    <item>
      <title>Python | grid() method in Tkinter </title>
      <link>/python/python-grid-method-in-tkinter-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-grid-method-in-tkinter-/</guid>
      <description>Python | grid() method in Tkinter The Grid geometry manager puts the widgets in a 2-dimensional table. The master widget is split into a number of rows and columns, and each &amp;ldquo;cell&amp;rdquo; in the resulting table can hold a widget. The grid manager is the most flexible of the geometry managers in Tkinter. If you don&amp;rsquo;t want to learn how and when to use all three managers, you should at least make sure to learn this one.</description>
    </item>
    
    <item>
      <title>Python | pack() method in Tkinter </title>
      <link>/python/python-pack-method-in-tkinter-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-pack-method-in-tkinter-/</guid>
      <description>Python | pack() method in Tkinter The Pack geometry manager packs widgets relative to the earlier widget. Tkinter literally packs all the widgets one after the other in a window. We can use options like fill, expand, and side to control this geometry manager.Compared to the grid manager, the pack manager is somewhat limited, but it&amp;rsquo;s much easier to use in a few, but quite common situations:
Put a widget inside a frame (or any other container widget), and have it fill the entire frame</description>
    </item>
    
    <item>
      <title>Python | PanedWindow Widget in Tkinter </title>
      <link>/python/python-panedwindow-widget-in-tkinter-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-panedwindow-widget-in-tkinter-/</guid>
      <description>Python | PanedWindow Widget in Tkinter Tkinter supports a variety of widgets to make GUI more and more attractive and functional. The PanedWindow widget is a geometry manager widget, which can contain one or more child widgets panes. The child widgets can be resized by the user, by moving separator lines sashes using the mouse.
Syntax: PanedWindow(master, **options)
Parameters:master: parent widget or main Tk() objectoptions: which are passed in config method or directly in the constructor</description>
    </item>
    
    <item>
      <title>Python | Binding function in Tkinter </title>
      <link>/python/python-binding-function-in-tkinter-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-binding-function-in-tkinter-/</guid>
      <description>Python | Binding function in Tkinter Tkinter is a GUI (Graphical User Interface) module that is widely used in desktop applications. It comes along with the Python, but you can also install it externally with the help of pip command. It provides a variety of Widget classes and functions with the help of which one can make our GUI more attractive and user-friendly in terms of both looks and functionality.The binding function is used to deal with the events.</description>
    </item>
    
    <item>
      <title>Python Tkinter -- Validating Entry Widget </title>
      <link>/python/python-tkinter--validating-entry-widget-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-tkinter--validating-entry-widget-/</guid>
      <description>Python Tkinter &amp;ndash; Validating Entry Widget Python offers a variety of frameworks to work with GUI applications. Tkinter or Tk interface is one of the most widely used Python interface to build GUI based applications. There are applications that require validation of text fields to prevent invalid input from the user before the form is submitted. Python allows input validation by allowing variable tracing using a callback function. This function is called whenever an input is added/deleted to/from an Entry widget.</description>
    </item>
    
    <item>
      <title>Kivy Tutorial </title>
      <link>/python/kivy-tutorial-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/kivy-tutorial-/</guid>
      <description>Kivy Tutorial Kivy is an opensource Python library that allows you to develop multi-platform graphical user interface applications on Windows, macOS, Android, iOS, Linux, and Raspberry-Pi. In addition to regular mouse and keyboard inputs, it supports multitouch events. Applications made using Kivy will appear similar across all the platforms but it also means that the applications feel or look will differ from any native application.
Table Of Content &amp;ndash; Getting Started</description>
    </item>
    
    <item>
      <title>Introduction to Kivy ; A Cross-platform Python Framework </title>
      <link>/python/introduction-to-kivy-a-cross-platform-python-framework-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/introduction-to-kivy-a-cross-platform-python-framework-/</guid>
      <description>Introduction to Kivy ; A Cross-platform Python Framework Kivy is an open-source, cross-platform Python framework used for developing multi-touch applications with a natural user interface. It allows developers to build applications that run on multiple platforms, including Windows, macOS, Linux, iOS, and Android.
Kivy is based on the Model-View-Controller (MVC) architecture and uses a declarative language to define the user interface. The framework provides a set of widgets and tools for creating dynamic and responsive user interfaces, including buttons, labels, text inputs, and more.</description>
    </item>
    
    <item>
      <title>Python | Add Label to a kivy window </title>
      <link>/python/python-add-label-to-a-kivy-window-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-add-label-to-a-kivy-window-/</guid>
      <description>Python | Add Label to a kivy window Kivy is a platform-independent GUI tool in Python. As it can be run on Android, iOS, Linux and Windows, etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktop applications.Label widget &amp;ndash; The Label widget is for rendering text. It supports ASCII and unicode strings. The label is the text which we want to add to our window, give to the buttons, and so on.</description>
    </item>
    
    <item>
      <title>Python | Textinput widget in kivy </title>
      <link>/python/python-textinput-widget-in-kivy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-textinput-widget-in-kivy-/</guid>
      <description>Python | Textinput widget in kivy Kivy is a platform-independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.
👉🏽 Kivy Tutorial &amp;ndash; Learn Kivy with Examples.
TextInput: The TextInput widget provides a box for editable plain text. Unicode, multiline, cursor navigation, selection and clipboard features are supported.</description>
    </item>
    
    <item>
      <title>Python | Canvas in kivy </title>
      <link>/python/python-canvas-in-kivy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-canvas-in-kivy-/</guid>
      <description>Python | Canvas in kivy Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications. ???????? Kivy Tutorial &amp;ndash; Learn Kivy with Examples.
Canvas: The Canvas is the root object used for drawing by a Widget .</description>
    </item>
    
    <item>
      <title>Python | Checkbox widget in Kivy </title>
      <link>/python/python-checkbox-widget-in-kivy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-checkbox-widget-in-kivy-/</guid>
      <description>Python | Checkbox widget in Kivy Kivy is a platform independent GUI tool in Python. Kivy applications can be run on Android, IOS, linux, and Windows, etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktop applications. Kivy Tutorial &amp;ndash; Learn Kivy with Examples.
Checkbox widget &amp;ndash;CheckBox is a specific two-state button that can be either checked or unchecked.</description>
    </item>
    
    <item>
      <title>Python | Dropdown list in kivy </title>
      <link>/python/python-dropdown-list-in-kivy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-dropdown-list-in-kivy-/</guid>
      <description>Python | Dropdown list in kivy Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.
???????? Kivy Tutorial &amp;ndash; Learn Kivy with Examples.
Dropdown list A drop-down list can be used with custom widgets. It allows you to display a list of widgets under a displayed widget.</description>
    </item>
    
    <item>
      <title>Python | Carousel Widget In Kivy </title>
      <link>/python/python-carousel-widget-in-kivy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-carousel-widget-in-kivy-/</guid>
      <description>Python | Carousel Widget In Kivy Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.
👉🏽 Kivy Tutorial &amp;ndash; Learn Kivy with Examples.
Carousel widget: The Carousel widget provides the classic mobile-friendly carousel view where you can swipe between slides.</description>
    </item>
    
    <item>
      <title>Python | BoxLayout widget in Kivy </title>
      <link>/python/python-boxlayout-widget-in-kivy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-boxlayout-widget-in-kivy-/</guid>
      <description>Python | BoxLayout widget in Kivy Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, Linux and Windows, etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications. ???????? Kivy Tutorial &amp;ndash; Learn Kivy with Examples.
Now in this article, we will learn about the use of BoxLayout widget in kivy and how to add some features like color, size etc to it.</description>
    </item>
    
    <item>
      <title>Python | Slider widget in Kivy </title>
      <link>/python/python-slider-widget-in-kivy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-slider-widget-in-kivy-/</guid>
      <description>Python | Slider widget in Kivy Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications. ???????? Kivy Tutorial &amp;ndash; Learn Kivy with Examples.
Slider: To work with the slider you first have to import the module which consists all features, functions of the slider i.</description>
    </item>
    
    <item>
      <title>Python | Popup widget in Kivy </title>
      <link>/python/python-popup-widget-in-kivy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-popup-widget-in-kivy-/</guid>
      <description>Python | Popup widget in Kivy Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.
👉🏽 Kivy Tutorial &amp;ndash; Learn Kivy with Examples.
Popup widget : The Popup widget is used to create popups. By default, the popup will cover the whole &amp;ldquo;parent&amp;rdquo; window.</description>
    </item>
    
    <item>
      <title>Python | Switch widget in Kivy </title>
      <link>/python/python-switch-widget-in-kivy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-switch-widget-in-kivy-/</guid>
      <description>Python | Switch widget in Kivy Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications. ???????? Kivy Tutorial &amp;ndash; Learn Kivy with Examples.
Switch widget: The Switch widget is active or inactive, as a mechanical light switch.</description>
    </item>
    
    <item>
      <title>Python | Spinner widget in kivy </title>
      <link>/python/python-spinner-widget-in-kivy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-spinner-widget-in-kivy-/</guid>
      <description>Python | Spinner widget in kivy Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.
👉🏽 Kivy Tutorial &amp;ndash; Learn Kivy with Examples.
Spinner widget : To work with spinner you must have to import:</description>
    </item>
    
    <item>
      <title>Python | Progress Bar widget in kivy </title>
      <link>/python/python-progress-bar-widget-in-kivy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-progress-bar-widget-in-kivy-/</guid>
      <description>Python | Progress Bar widget in kivy Kivy is a platform-independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.
👉🏽 Kivy Tutorial &amp;ndash; Learn Kivy with Examples.
Progressbar Widget: ProgressBar widget is used to visualize the progress of some task.</description>
    </item>
    
    <item>
      <title>Python | Working with buttons in Kivy </title>
      <link>/python/python-working-with-buttons-in-kivy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-working-with-buttons-in-kivy-/</guid>
      <description>Python | Working with buttons in Kivy Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. Kivy provides you the functionality to write the code for once and run it on different platforms. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications. Kivy Tutorial &amp;ndash; Learn Kivy with Examples.</description>
    </item>
    
    <item>
      <title>Python | Float Layout in Kivy </title>
      <link>/python/python-float-layout-in-kivy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-float-layout-in-kivy-/</guid>
      <description>Python | Float Layout in Kivy Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.
👉🏽 Kivy Tutorial &amp;ndash; Learn Kivy with Examples.
FloatLayout: Floatlayout allows us to place the elements relatively based on the current window size and height especially in mobiles i.</description>
    </item>
    
    <item>
      <title>GridLayouts in Kivy | Python </title>
      <link>/python/gridlayouts-in-kivy-python-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/gridlayouts-in-kivy-python-/</guid>
      <description>GridLayouts in Kivy | Python Kivy is a platform independent as it can be run on Android, IOS, Linux and Windows, etc. Kivy provides you the functionality to write the code for once and run it on different platforms. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktop applications.
Use this command To install kivy: pip install kivy Kivy Tutorial &amp;ndash; Learn Kivy with Examples.</description>
    </item>
    
    <item>
      <title>Python | StackLayout in Kivy </title>
      <link>/python/python-stacklayout-in-kivy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-stacklayout-in-kivy-/</guid>
      <description>Python | StackLayout in Kivy Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications. ???????? Kivy Tutorial &amp;ndash; Learn Kivy with Examples.
StackLayout: To use StackLayout first import StackLayout by below command: from kivy.uix.stacklayout import StackLayout It is quite confusing to understand the difference between Stack and Boxlayout.</description>
    </item>
    
    <item>
      <title>Python| AnchorLayout in Kivy </title>
      <link>/python/python-anchorlayout-in-kivy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-anchorlayout-in-kivy-/</guid>
      <description>Python| AnchorLayout in Kivy Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux and Windows etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.
👉🏽 Kivy Tutorial &amp;ndash; Learn Kivy with Examples.
AnchorLayout: The AnchorLayout aligns its children to a border (top, bottom, left, right) or center.</description>
    </item>
    
    <item>
      <title>Python | Relative Layout in Kivy </title>
      <link>/python/python-relative-layout-in-kivy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-relative-layout-in-kivy-/</guid>
      <description>Python | Relative Layout in Kivy Kivy is a platform-independent GUI tool in Python. As it can be run on Android, IOS, Linux and Windows, etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktop applications.
Kivy Tutorial &amp;ndash; Learn Kivy with Examples. Relative Layout: Relative layout is just similar to the FloatLayout the difference is that its child widget are positioned relative to the layout.</description>
    </item>
    
    <item>
      <title>Python | PageLayout in Kivy </title>
      <link>/python/python-pagelayout-in-kivy-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-pagelayout-in-kivy-/</guid>
      <description>Python | PageLayout in Kivy Kivy is a platform independent GUI tool in Python. As it can be run on Android, IOS, linux, and Windows, etc. It is basically used to develop the Android application, but it does not mean that it can not be used on Desktops applications.
Kivy Tutorial &amp;ndash; Learn Kivy with Examples. PageLayout: The PageLayout works in a different manner from other layouts. It is a dynamic layout, in the sense that it allows flipping through pages using its borders.</description>
    </item>
    
    <item>
      <title>Matplotlib Tutorial </title>
      <link>/python/matplotlib-tutorial-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/matplotlib-tutorial-/</guid>
      <description>Matplotlib Tutorial Matplotlib is easy to use and an amazing visualizing library in Python. It is built on NumPy arrays and designed to work with the broader SciPy stack and consists of several plots like line, bar, scatter, histogram, etc. In this article, we will learn about Python plotting with Matplotlib from basics to advance with the help of a huge dataset containing information about different types of plots and their customizations.</description>
    </item>
    
    <item>
      <title>Python Seaborn Tutorial </title>
      <link>/python/python-seaborn-tutorial-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-seaborn-tutorial-/</guid>
      <description>Python Seaborn Tutorial Seaborn is a library mostly used for statistical plotting in Python. It is built on top of Matplotlib and provides beautiful default styles and color palettes to make statistical plots more attractive.
In this tutorial, we will learn about Python Seaborn from basics to advance using a huge dataset of seaborn basics, concepts, and different graphs that can be plotted.
Table Of Content Getting Started
Using Seaborn with Matplotlib</description>
    </item>
    
    <item>
      <title>Python Plotly tutorial </title>
      <link>/python/python-plotly-tutorial-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-plotly-tutorial-/</guid>
      <description>Python Plotly tutorial Python Plotly Library is an open-source library that can be used for data visualization and understanding data simply and easily. Plotly supports various types of plots like line charts, scatter plots, histograms, cox plots, etc. So you all must be wondering why Plotly over other visualization tools or libraries? Here&amp;rsquo;s the answer &amp;ndash;
Plotly has hover tool capabilities that allow us to detect any outliers or anomalies in a large number of data points.</description>
    </item>
    
    <item>
      <title>Python Bokeh tutorial -- Interactive Data Visualization with Bokeh </title>
      <link>/python/python-bokeh-tutorial--interactive-data-visualization-with-bokeh-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-bokeh-tutorial--interactive-data-visualization-with-bokeh-/</guid>
      <description>Python Bokeh tutorial &amp;ndash; Interactive Data Visualization with Bokeh Python Bokeh is a Data Visualization library that provides interactive charts and plots. Bokeh renders its plots using HTML and JavaScript that uses modern web browsers for presenting elegant, concise construction of novel graphics with high-level interactivity. Features of Bokeh:
Flexibility: Bokeh can be used for common plotting requirements and for custom and complex use-cases.
Productivity: Its interaction with other popular Pydata tools (such as Pandas and Jupyter notebook) is very easy.</description>
    </item>
    
    <item>
      <title>Tableau Tutorial </title>
      <link>/python/tableau-tutorial-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/tableau-tutorial-/</guid>
      <description>Tableau Tutorial Tableau is a powerful tool used for data analysis, visualization. It allows creating amazing and interactive visualization and that too without coding. It provides the features like cleaning, organizing, and visualizing data. Tableau is very famous as it can take in data and produce the required data visualization output in a very short time. Basically, it can elevate your data into insights that can be used to drive your action in the future.</description>
    </item>
    
    <item>
      <title>Python Programs </title>
      <link>/python/python-programs-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-programs-/</guid>
      <description>Python Programs The following Python section contains a wide collection of Python programming examples. These code examples cover a wide range of basic concepts in the Python language including List, strings, dictionary, tuple, sets, and many more. Each program example contains multiple approaches to solve the problem.</description>
    </item>
    
    <item>
      <title>Python Exercises, Practice Questions and Solutions </title>
      <link>/python/python-exercises-practice-questions-and-solutions-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-exercises-practice-questions-and-solutions-/</guid>
      <description>Python Exercises, Practice Questions and Solutions Python is a widely used general-purpose high-level language that can be used for many purposes like creating GUI, web Scraping, web development, etc. You might have seen various Python tutorials that explain the concepts in detail but that might not be enough to get hold of this language. The best way to learn is by practicing it more and more.
This Python exercise helps you learn Python using sets of detailed programming Questions from basic to advance.</description>
    </item>
    
    <item>
      <title>Python Multiple Choice Questions </title>
      <link>/python/python-multiple-choice-questions-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/python/python-multiple-choice-questions-/</guid>
      <description>Python Multiple Choice Questions Mcq / Quizzes
Outputs
Mcq / Quizzes :
Functions
Operators
Miscellaneous
Data Type
Output
Outputs :
Output of Python Program | Set 1
Output of python program | Set 2
Output of python program | Set 3
Output of python program | Set 4
Output of python program | Set 5
Output of python program | Set 6(Lists)
Output of python program | Set 7
Output of python program | Set 8</description>
    </item>
    
    
  </channel>
</rss>
